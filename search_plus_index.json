{"./":{"url":"./","title":"介绍","keywords":"","body":"Linux 基础知识 常用命令 防火墙 基础配置手册 网络基础 Linux 基础 shell 脚本 systemd "},"network/network.html":{"url":"network/network.html","title":"网络基础","keywords":"","body":"Linux 基础之网络 网络基础 TCP/IP协议 网络通讯协议 网络传输介质 Windows 基础知识 VMware 网络模型 "},"network/1.Network-Basics.html":{"url":"network/1.Network-Basics.html","title":"网络基础","keywords":"","body":"网络基础 1.网络协议与标准 协议 语义 语法 同步 同步 ISO: 国际化标准组织 ANSI: 美国国家标准化局 ITU-T: 国际电信联盟 IEEE: 电气和电子工程师学会 2. WAN 与 LAN WAN 使用外网 ip 通信的网络属于 WAN （广域网） LAN 使用内网 ip 通信的网络属于 LAN （局域网） 3. IEEE 802 局域网标准 IEEE 802.3 (有线网络) IEEE 802.3u标准：百兆快速以太网标准 IEEE 802.3z标准：光纤介质实现千兆以太网标准 IEEE 802.3ab标准：双绞线实现千兆以太网标准 IEEE 802.3ae标准：光纤介质实现万兆以太网标准 IEEE 802.3an标准：双绞线实现万兆以太网标准 IEEE 802.11 (无线网络) IEEE 802.11a：载波频率5GHz，速率最高可达54Mbps IEEE 802.11b：载波频率2.4GHz，速率最高可达11Mbps IEEE 802.11g：载波频率2.4GHz，速率最高可达54Mbps 4. 七种网络拓扑结构 星型拓扑 星型拓扑结构是一个中心，多个分节点。它结构简单，连接方便，管理和维护都相对容易，而且扩展性强。网络延迟时间较小，传输误差低。中心无故障，一般网络没问题。中心故障，网络就出问题，同时共享能力差，通信线路利用率不高。 网型拓扑 网形拓扑结构是应用最广泛的，它的优点是不受瓶颈问题和失效问题的影响，一天线路出问题，可以做其他线路，但太复杂，成本高。 总线拓扑 总线拓扑结构所有设备连接到一条连接介质上。总线结构所需要的电缆数量少，线缆长度短，易于布线和维护。多个结点共用一条传输信道，信道利用率高。但不找诊断故障。 环形拓扑 环形拓扑结构是节点形成一个闭合环。工作站少，节约设备。当然，这样就导致一个节点出问题，网络就会出问题，而且不好诊断故障。 树形拓扑 树形拓扑结构从总线拓扑演变而来。形状像一棵倒置的树, 顶端是树根，树根以下带分支，每个分支还可再带子分支，树根接收各站点发送的数据，然后再广播发送到全网。好扩展，容易诊断错误，但对根部要求高。 混合型拓扑 混合式拓扑结构是将上面两种或多种共同使用。如用的多有星总线型、星环型等。 蜂窝拓扑 蜂窝拓扑结构是无线局域网中常用的结构。它以无线传输介质（微波、卫星、红外等）点到点和多点传输为特征，是一种无线网，适用于城市网、校园网、企业网。 5. 计算机数值 十进制数制系统 十进制数制系统包括10个数字： 0 1 2 3 4 5 6 7 8 9 二进制数制系统 二进制这个词的意思是基于两个数字： 这些二进制数或二进制位表示位 0 和 1 0 1 十六进制数系统 十六进制数制系统的基数是16： 0 1 2 3 4 5 6 7 8 9 A B C D E F 数制的表示 十进制数 *Decimal Number (1010)_{10}，1010D，1010 二进制数 *Birnay Number (1010)_2,1010B 十六进制数 *Hexadecimal number (1010)_{16},1010H 二进制转换 二进制转换十进制 125=1\\times2^6+1\\times2^5+1\\times2^4+1\\times2^3+1\\times2^2+0\\times2^1+1\\times2^0 125 = 0111 1101b 装水桶法（用于心算ip） 每个 ip 有32位，每8位为一组，将这8位数的数值写出 1 1 1 1 1 1 1 1 128 64 32 16 8 4 2 1 如果现在有一个网段，需要将十进制转换为二进制，对照上方的表格，从左到右依次做减法，上方表格中的十进制数作为被减数，网段作为减数。若减数大于被减数，这个被减数对应的二进制数位为 1，若减数小于被减数，则这个被减数对应的二进制数位为 0，并跳过这一位，向下做减法。 举例： 204-128=76-64=10-8=2-2=0 对照表格得出: 1 1 1 1 1 1 1 1 128 64 32 16 8 4 2 1 1 1 0 0 1 0 1 0 所以这个网段转换成二进制数是 1100 1010B。 十六进制转换十进制的快速算法 一个十六进制数最高位是 F，也就是15.而4个二进制数的总和正好等于15。所以每个十六进制数可以用4个二进制数来表示。然后在使用二进制转换为十进制。 举例： (FA)_{16} F = 1111 A = 1010 (FA)_{16} = 1111 1010B=240 储存量 计算机的储存量可以用位和字节来表示 8bit（位） 1byts（字节） 1024byts 1KB 1024KB 1MB 1024MB 1GB 1024GB 1TB 1024TB 1EB 1024EB 1PB 1024PB 1ZB "},"network/2.TcpProts.html":{"url":"network/2.TcpProts.html","title":"TCP/IP协议","keywords":"","body":"OSI 模型 与 TCP/IP模型 1.OSI七层框架 ISO：国际标准化组织 OSI：开放系统互联 IOS：思科交换机和路由器的操作系统 OSI七层模型 各层的主要作用： 第7层（应用层）：各种应用 第6层（表示层）：将汉字、英文、图片、声音和影像翻译为二进制 第5层（会话层）：判断当前数据是否要进行远程会话 第4层（传输层）：判断数据发送的协议（TCP/UDP），判断端口 第3层（网络层）：确定IP地址（源IP、目标IP） 第2层（数据链路层）：确定MAC地址 第1层（物理层）：通过网线和网卡等物理设备在主机之间进行数据的传输 2.各层的主要作用 OSI层 用途 作用 TCP/IP协议 应用层(application layer) 文件传输、电子邮件、文件服务 用户接口 TFTP，HTTP，SNMP，FTP，SMTP，DNS，TELENT 表示层(persentation) 数据格式化，代码转换，数据加密 数据的表示、安全、压缩 没有协议 会话层(session layer) 解除或建立与别的接点的联系 建立、管理、中止会话 没有协议 传输层(transport layer) 提供端对端的接口 可靠与不可靠的传输，传输的错误检测，流控 TCP，UDP 网络层(network layer) 为数据包选择路由 进行逻辑地址寻址，实现不同网络之间的路由选择 IP，ICMP，RIP，OSPF，BGP，IGMP 数据链路层(data link layer) 传输有地址的帧以及错误检测功能 组帧，进行硬件地址寻址，差错检验等功能 SLIP，CSLIP，PPP，ARP，RARP，MTU 物理层(physical layer 以二进制数据形式在物理媒体上传输数据 设备之间的比特流传输，物理接口，电气特性等 ISO2110，IEEE802，IEEE802.2 OSI七层网络模型 Linux的TCP/IP概念层 对应网络协议 相应措施 应用层(application layer) * TFTP，FTP，NFS，WAIS * 表示层(persentation) 应用层 telent，rlogin，snmp，gopher Linux应用命令测试 会话层(session layer) * smtp，dns * 传输层(transport layer) 传输层 TCP，UDP * 网络层(network layer) 网际层 IP，ICMP，ARP，RARP，AKP，UUCP * 数据链路层(data link layer) 网络接口 FDDI，ethernet，arpanet，PDN，SLP，PPP ARP地址检测、物理连接检测 物理层(physical layer * IEEE 802.1A到IEEE 802.11 * 3.TCP/IP模型 现在一般被公认的就是TCP/IP 5，因为数据链路层中的协议是真实的物理硬件交换机来完成的，不能将它归为网络接口层中。 4.TCP/IP协议族的组成 应用层 HTTP：超文本传输协议 FTP： 文件传输协议 TFTP：简单文件传输协议，现在多用于思科路由器和交换机升级操作系统。 SMTP：简单邮件传输协议 POP3：邮局协议3代 SNMP：简单网络管理协议$\\Rightarrow$集群监控服务器 DNS： 域名系统 传输层 TCP：传输控制协议 UDP：用户数据报协议 网络层 IP：网际协议 ARP：(Address Resolution Protocol)，地址解析协议。将一个已知的IP地址解析成MAC地址。 RARP：反向地址解析协议 ICMP：互联网控制消息协议 IGMP：网络组管理协议 SLIP：串行线路网际协议。是Windows远程访问的一种旧工业标准，主要在Unix远程访问服务器中使用。 CSLIP：一种压缩的SLIP协议，常用在Telnet，Rlogin之类的应用程序中 OSPF：开放最短路由优先协议 BGP：边界网关协议，是互联网上一个核心的去中心化自治路由协议。 RIP：一种内部网关协议（IGP），是一种动态路由选择协议，用于自治系统（AS）内的路由信息的传递。 物理层 PPP：点对点协议 PPPOE：点对点拨号协议 MTU：最大传输单元，是指一种通信协议的某一层上面所能通过的最大数据包大小（以字节为单位）。 5.数据包封装过程 层 封装 解封装 应用层 \\Downarrow上层数据 \\Uparrow上层数据 传输层 \\Downarrow上层数据 + TCP头部 \\Uparrow上层数据 - TCP头部 网络层 \\Downarrow上层数据+TCP头部 + IP头部 \\Uparrow上层数据+TCP头部 - IP头部 数据链路层 \\Downarrow上层数据+TCP头部+IP头部 + MAC头部 \\Uparrow上层数据+TCP头部+IP头部 - MAC头部 物理层 \\Downarrow比特流 \\Uparrow比特流 6.设备与层之间对应的关系 互联设备 工作层次 主要功能 代表性设备 计算机 应用层 * 电脑 中继器 物理层 对接受信号进行再次和发送，只起到扩展传输距离用，对高层协议是透明的，但使用个数有限（以太网是4个） * 网桥 数据链路层 根据帧物理地址进行网络间信息转发，可缓解网络通信繁忙度，提高效率，只能够连接相同MAC层的网络 防火墙 路由器 网络层 通过逻辑地址进行网络间的信息转发，可完成异构网络之间的互联互通，只能连接使用相同网络层协议的子网。 路由器 网关 传输层、应用层 最复杂的网络互联设备，用于连接网络层上执行不同协议的子网（例如Novell与SNA） 交换机 集线器 物理层 多端口中继器 网卡 二层交换机 数据链路层 多端口网桥 * 三层交换机 网络层 带路由功能的二层交换机 * 多层交换机 高层 带协议转换的交换机 * 位于高层的设备可以认识底层的东西，但是底层的设备不能识别高层的协议。 MAC地址是固化在网卡的ROM中。 7.各层之间通信 计算机A向计算机B发送数据。 从应用层到传输层，在传输层中数据包封入源端口和目标端口，比如网页服务，源端口是随机的，目标端口是80； 从传输层到网络层，在网络层中写入源IP和目标IP，源IP是A主机的IP地址，目标IP是B主机的IP地址； 从网络层到数据链路层，在数据链路层中写入源MAC地址和目标MAC地址，源MAC是A主机的MAC地址，目标MAC是交换机的MAC地址； 数据包通过物理层发送; 数据包被交换机的1/0口接收，交换机获取包头中的目标MAC地址，通过泛洪向局域网内所有网卡的MAC地址发起询问。 路由器回应后，交换机通过网线将数据包发送至路由器。 路由获取数据包后读取包头中目标MAC地址，确定是本机的MAC地址后，将数据包向上一层传递。 网络层获取数据包中的目标IP地址，通过广播向网络中所有的路由器询问目标IP地址。 B路由器回复信息，A路由器将B路由器的MAC地址更改为数据包包头中的目标MAC地址。 数据包传递给B路由器，路由器确定过MAC地址后，将数据包向上层传递。 路由器确定目标IP后，确认这个数据包是传给自己的，传给交换机B。 交换机读取包头中的MAC地址，对照内存中的MAC对照表，通过RARP协议将IP翻译为MAC地址，传送给目标IP的主机。 "},"network/3.CommProt.html":{"url":"network/3.CommProt.html","title":"网络通讯协议","keywords":"","body":"网络通信协议 1.广播与广播域概述 广播：将广播地址作为目的地址的数据帧 广播域：网络中能接收到同一个广播所有节点的集合 接收同样广播消息的节点的集合。如：在该集合中的任何一个节点传输一个广播帧，则所有其他能收到这个帧的节点都被认为是该广播帧的一部分。由于许多设备都极易产生广播，所以如果不维护，就会消耗大量的带宽，降低网络的效率。由于广播域被认为是OSI中的第二层概念，所以像Hub，交换机等第一，第二层设备连接的节点被认为都是在同一个广播域。而路由器，第三层交换机则可以划分广播域，即可以连接不同的广播域。 MAC地址广播：广播地址为FF-FF-FF-FF-FF-FF IP广播地址：广播IP地址为IP地址网段的广播地址 2.IP协议 IP地址 主机唯一标示，保证主机间的正常通讯的一种网络编码，用来确定网络中一个节点。 IP地址由32位二进制数组成，为了便于记忆，将32位二进制数划分为每八位一组，再将每八位转换为十进制。 例如： (1101 0010.0100 1001.1000 1100.0000 0110)_2 \\Rightarrow 210.73.140.6 IP地址的组成 IP地址由两部分组成 网络部分(Network) 主机部分(Host) 192.168.0. —— 25 网络部分 — 主机部分 IP地址的分类 IP地址分为A、B、C、D、E五类，每一类有不同划分规则 IP地址跟A、B、C、D、E分类没有任何关系，原因是子网掩码，IP地址的主机位和网络位依靠子网掩码划分。 A类地址 前八位第一位必须为 0，所以A类地址的范围就是0000 0000 到 0111 1111，因此换为十进制就是0 ~ 127。但是127网段中127.0.0.1是本地回环网卡，整个网段都被占用。 子网掩码：255.0.0.0 最大网段数：2^7-2 = 126个 最大主机数：^{24}-2=16777216-2=16777214 全 0 全 1 的地址不可分配，作为保留地址。 上面减2也是这个原因。 一般用于大型网络。 B类地址 前八位的前两位必须是 10，所以B类地址的范围就是1000 0000 到 1011 1111,因此转换为十进制就是128 ~ 191。 子网掩码：255.255.0.0 最大网段数：2^{14}=16384 最大主机数：2^{16}-2=65536-2=65534 C类地址 前八位的前三位必是110，所以C类地址的范围是1100 0000 到 1101 1111，因此转换为十进制就是192 ~ 233。 子网掩码：255.255.255.0 最大网段数：2^{21}=2097152 最大主机数：2^8-2=256-2=254 D类地址 前八位的前四位必须是1110，所以D地址的范围是1110 0000 到 1110 1111，因此转换为十进制就是224 ~ 239，D类地址是广播地址,只有特殊广播网卡才能使用。 是多播地址。该类IP地址的最前面为“1110”，所以地址的网络号取值于224~239之间。 一般用于多路广播用户。 E类地址 前五位必须是1111，所以E类地址的范围就是1111 0000 到 1111 1111，因此转换为十进制是240 ~ 255，E类地址是备用地址，未使用。 是保留地址。该类IP地址的最前面为“1111”，所以地址的网络号取值于240 ~ 255之间 回环地址 127.x.x.x有的资料说，它属于A类。 如127.0.0.1 等效于localhost或本机IP。 一般用于测试使用。 例如：ping 127.0.0.1来测试本机TCP/IP是否正常。http://127.0.0.1:8080 等效 http://localhost:8080 特殊说明 每一个字节都为0的地址（0.0.0.0）对应当前主机。 IP地址中的每一个字节都为1的IP地址（255.255.255.255）是当前子网的广播地址。 IP地址中凡是以11110开头的E类IP的地址，都保留用于将来和实验使用。 网络号的第一个8位不能全为0。 IP地址不能以127为开头，该类地址中数字127.0.0.1 ~ 127.255.255.254用于回路测试。 A、B、C三类IP地址的组成 网络部分(Network) 主机部分(Host) 公有IP地址用于Internet 私有IP地址是企业用户在内部网络中使用 私有地址不能再Internet上使用 私有地址包括3组 A类 10.0.0.0 ~ 10.255.255.255 1个网段 B类 172.16.0.0 ~ 172.31.255.255 16个网段 C类 192.168.0.0 ~ 192.168.255.255 256个网段 子网掩码 规则： 子网掩码必须是连续的1 子网掩码必须和IP地址同时出现 子网掩码中1对应网络位，0对应主机位。 IP地址和子网掩码做“逻辑与”运算得到网络地址 0和任何数相与都等于0 1和任何数相与都等于任何数本身 11000000 . 10101000 . 00000001 . 10111101 IP地址 11111111 . 11111111 . 11111111 . 00000000 子网掩码 11000000 . 10101000 . 00000001 . 00000000 二进制 192 . 168 . 1 . 192 十进制 网络中不同主机之间通讯 同网段主机之间的通讯，将数据直接发送给另一台主机 源主机的网络地址 = 目标主机的网络地址 不同网段主机之间的通讯，将数据发送给网关进行转发 源主机的网络地址 \\neq 目标主机的网络地址 子网掩码(Netmask)可以区分IP地址的网络地址部分 A、B、C三类地址的默认子网掩码 A类：255.0.0.0 B类：255.255.0.0 C类：255.255.255.0 子网划分 子网划分的原因 满足不同网络对IP地址的需求 实现网络的层次性 节省IP地址 子网分类 有类地址：有类别，标准子网掩码。不认识VLSM变长子网掩码。 无类地址：可以识别VLSM变长子网掩码。 子网划分的原理 将192.168.1.0/24划分为4个小网段 将主机位划到网络位，不认识VLSM子网掩码 可变长子网掩码(VLSM) VLSM允许把子网继续划分为更小的子网 VLSM子网掩码： 1111 1111 . 1111 1111 . 1111 1111 . 0000 0000 网络位24位，主机位8位。192.168.1.0/24与子网掩码255.255.255.0相与。 1111 1111 . 1111 1111 . 1111 1111 . 1100 0000 网络位向主机位借2位，网络位26位，主机位6位。子网掩码变为255.255.255.0。私有IP变为192.168.1.0/26。 子网掩码计算公式 需要把IP和子网掩码转为二进制 网络地址：把IP地址与子网掩码相与，得出就是网络地址 广播地址：子网掩码中有几个0，就把IP地址的后几位换成1 子网数：有效子网掩码中，有n个1，子网数就是2的n次方 主机数：有效子网掩码中，有n个0，主机数就是2的n次方减2 子网掩码表格 子网掩码 1的个数 子网数 主机数 255.255.255.0 /24 1 255-2 255.255.255.128 /25 2 128-2 255.255.255.192 /26 4 64-2 255.255.255.224 /27 8 32-2 255.255.255.240 /28 16 16-2 255.255.255.248 /29 32 8-2 255.255.255.252 /30 64 4-2 数据包格式 数据包包头有IP包头，TCP协议数据格式。TCP/IP包头 1-1. 版本4位，表示版本号，目前最广泛的是4=B1000，即常说的IPv4；相信IPv6以后会广泛应用，它能给世界上每个纽扣都分配一个IP地址。 1-2. 头长4位，数据包头部长度。它表示数据包头部包括多少个32位长整型，也就是多少个4字节的数据。无选项则为5（红色部分）。 1-3. 服务类型，包括8个二进制位，每个位的意义如下： 过程字段：3位，设置了数据包的重要性，取值越大数据越重要，取值范围为：0（正常）~ 7（网络控制） 延迟字段：1位，取值：0（正常）、1（期特低的延迟） 流量字段：1位，取值：0（正常）、1（期特高的流量） 可靠性字段：1位，取值：0（正常）、1（期特高的可靠性） 成本字段：1位，取值：0（正常）、1（期特最小成本） 保留字段：1位 ，未使用 1-4. 包裹总长16位，当前数据包的总长度，单位是字节。当然最大只能是65535，及64KB。 2-1. 重组标识16位，发送主机赋予的标识，以便接收方进行分片重组。 2.2. 标志3位，他们各自的意义如下： 保留段位(2)：1位，未使用 不分段位(1)：1位，取值：0（允许数据报分段）、1（数据报不能分段） 更多段位(0)：1位，取值：0（数据包后面没有包，该包为最后的包）、1（数据包后面有更多的包） 2-3. 段偏移量13位，与更多段位组合，帮助接收方组合分段的报文，以字节为单位。 3-1. 生存时间8位，经常ping命令看到的TTL（Time To Live）就是这个，每经过一个路由器，该值就减一，到零丢弃。 3-2. 协议代码8位，表明使用该包裹的上层协议，如TCP=6，ICMP=1，UDP=17等。 3-3. 头检验和16位，是IPv4数据包头部的校验和。 4-1.源始地址，32位4字节，我们常看到的IP是将每个字节用点（.）分开，如此而已。 5-1. 目的地址，32位，同上。 6-1. 可选选项，主要是给一些特殊的情况使用，往往安全路由会当作攻击而过滤掉，普联（TP_LINK）的TL-ER5110路由就能这么做。 7-1. 用户数据。 IP包头长度为20字节（160个二进制位），可选项可以增加包头长度，最大60字节。 版本：版本字段，IP v4。 部首长度：IP包头部长度，因为长度可变，因此需要定义。 优先级与服务类型：优先级与服务类型，提供3层的QoS。 总长度：IP数据总长度，所以最大长度为$2^{16}=65536$。 标识符、标志、段偏移量：上层来的数据到IP层会被分片，这几个字段用来对数据包进行标识，使数据到达目的端重组时，不会乱序 TTL：生命周期字段，单位是跳。经过一个路由器TTL值减去1，为0时，数据包丢弃。为了防止一个数据包在网络中无限循环下去。 协议号：协议字段，用来标识封装的上层数据是UDP还是TCP，UDP是17，TCP是6。 首部校验和：用来检验数据包是否发生错误。 TCP协议数据格式 TCP包头长度为20字节，可选项可以增加包头长度。 SYN：发送请求包（信包） ASK：回应请求包（回应包） TCP协议工作机制 A向B发送包，在TCP包中有SYN信包（序列号是X），B就会知道A是发送请求连接。 B向A回复ACK回应包（序列号是Y），并在SYN信包中序列号X+1，表明B收到A发送的SYN信包。 A收到B的ACK回应包后，查看ACK回应包确认号，并更改回应包ACK（序列号y+1)。 TCP数据包结构： 1-1. 源始端口16位，范围是0-65535。 1-2. 目的端口，同上。 2-1. 数据序号32位，TCP为发送的每个字节都编一个号码，这里存储当前数据包数据第一个字节的序号。 3-1. 确认序号32位，为了安全，TCP告诉接受者希望他下次接到数据包的第一个字节的序号。 4-1. 偏移4位，类似IP，表明数据距包头有多少个32位。 4-2. 保留6位，未使用，应置零。 4-3. 紧急比特URG—当URG＝1时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)。 4-4. 确认比特ACK—只有当ACK＝1时确认号字段才有效。当ACK＝0时，确认号无效。参考TCP三次握手 4-5. 复位比特RST(Reset) —当RST＝1时，表明TCP连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。参考TCP三次握手 4-6. 同步比特SYN—同步比特SYN置为1，就表示这是一个连接请求或连接接受报文。参考TCP三次握手 4-7. 终止比特FIN(FINal)—用来释放一个连接。当FIN＝1时，表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。 4-8. 窗口字段16位，窗口字段用来控制对方发送的数据量，单位为字节。TCP连接的一端根据设置的缓存空间大小确定自己的接收窗口大小，然后通知对方以确定对方的发送窗口的上限。 5-1. 包校验和16位，包括首部和数据这两部分。在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。 5-2. 紧急指针16位，紧急指针指出在本报文段中的紧急数据的最后一个字节的序号。 6-1. 可选选项24位，类似IP，是可选选项。 6-2. 填充8位，使选项凑足32位。 7-1. 用户数据 SYN的漏洞 SYN拒绝服务攻击（Dos攻击） A向B发起连接，B回应后等待A再次发送，但A不再发送，B会空出一部分运算性能等待，这段时间无法回应其他主机的请求。 分布式攻击（DDos攻击） 通过软件把源IP修改成随机IP，或劫持大量主机向B进行Dos攻击。 可以看出，每个IP包至少要20字节的头部长度，这些与下载内容无关，加上目前多数传输，包括http协议（就是IE直接下载），都是基于TCP协议的，所以IP包裹还要从用户数据中扣除20字节的TCP包头，这里已经是40字节，加上其他程序的连接，状态确认等等包裹，因而算出来要比理论值要小。 另外网络环境（包括稳定因素和传输节点的转发率）也是影响下载速度的重要原因… UDP协议数据格式 UDP协议和TCP协议同位于传输层，介于网络层（IP）和应用层之间：UDP数据部分为应用层报文，而UDP报文在IP中承载 UDP比TCP快： UDP不需要三次握手 UDP包头长度定长 源端口：端口号0-65535，1-1024保留端口号，为标准的服务端口 目的端口：无须多解释 UDP长度：header＋data 总长度 UDP校验和：伪头部，头部，data 三部分校验和。 数据：上层应用层的数据。 伪头部 UDP校验和中的伪头部，并非UDP报文中的有效数据，是提取了IP数据报中的源IP，目的IP信息并加上协议等字段构造的数据。伪头部在实际网络传输中，仅用作校验和计算使用，并不发送！因此称为伪头部。事实上在TCP校验和计算中也用到了伪头部，与UDP一致。 "},"network/4.NTM.html":{"url":"network/4.NTM.html","title":"网络传输介质","keywords":"","body":"网络传输介质 信号 信号的分类 模拟信号 数字信号 模拟信号在传输的过程中的产生的失真 噪声 衰减 数字信号的优势 抗干扰能力强 传输距离远并能保证质量 介质 双绞线 总共8根双绞线，两两绞和在一起。 常用的有5类，超5类和6类。 双绞线的分类 屏蔽双绞线:铜线外包裹一层金属网膜，用于电磁环境非常复杂的工业环境中。 非屏蔽双绞线：用于电磁干扰相对较弱的环境。 双绞线的标准与分类 EIA/TIA-568——“商业建筑物电信布线标准”。 Cat 5：主要用于100Base-T和10Base-T网络。 Cat 5e：衰减更小，串扰更少，性能优于5类线。 Cat 6：传输频率为200MHz。 Cat 7：传输频率为600MHz。 光纤的特点 传输带宽高 传输距离远 抗干扰能力强 特点：光脉冲在光纤中的传输是利用了光的全反射原理. 光纤的分类 单模光纤 多模光纤 单模光纤 多模光纤 用于高速度、长距离 用于低速度、短距离 成本高 成本低 端接较难 端接较易 窄芯线，需要激光源 宽芯线，聚光好，光源可采用激光或发光二极管 耗散极小，高效 耗散大，低效 接口分类 以太网接口：RJ-45接头、RJ-45接头 光线接口分类： FC圆形带螺纹光纤接头 ST卡接式圆形光纤接头 SC方形光纤接头 LC窄体方形光纤接头 MT-RJ收发一体的方形光纤接头 双绞线的连接规范 T568A：白绿、绿、白橙、蓝、白蓝、橙、白棕、棕 T568B：白橙、橙、白绿、蓝、白蓝、绿、白棕、棕 如果使用交叉线，线序是T568A和T568B，在网线检测器的显示如下 线序 1 2 3 4 5 6 7 8 T568A 白绿 绿 白橙 蓝 白蓝 橙 白棕 棕 线序 3 6 1 4 5 2 7 8 T568B 白橙 橙 白绿 蓝 白蓝 绿 白棕 棕 线序中1236会变为3612。 线缆的连通 直通线：不同设备之间使用直通线 交叉线：相同设备之间使用交叉线 全反线：控制思科路由器及交换机的Console口使用、 交换机与交换机之间可以使用直通/交叉线，但是最好使用交叉线，直通线可以使用是因为交换机牺牲部分运算性能转换线序。 双绞线跳线的制作 工具 压线钳 步骤 将双绞线的外皮剥去适当的长度 将每条线按照线序调整好 把线头剪齐 将双绞线插入RJ-45接头 用压线钳压紧 电缆连通性常见问题 线缆开路 线路接错 线缆接触不良 "},"network/5.win2008.html":{"url":"network/5.win2008.html","title":"winServe 2008","keywords":"","body":"Windows Server 2008 服务 磁盘管理 分区表形式 分区表分类 MBR分区表 最大支持2.1T硬盘，最多支持4个分区 GPT分区表（全局唯一标示分区表） 支持9.4ZB硬盘(1ZB=1024PB,IPB=1024EB,1EB=1024TB) 理论上支持的分区数没有限制，但Windows显示128个主分区 MBR分区类型 主分区：最多只能有4个 扩展分区： 最多只能有一个 主分区加扩展分区最多有4个 不能写入数据，只能包含逻辑分区 逻辑分区 可以有若干个 格式化 格式化又称为逻辑格式化，它是指根据用户指定的文件系统（如FAT16、FAT32、NTFS、EXT2、EXT3、EXT4等），在磁盘的特定区域写入特定数据，在分区中划出一片用于存放文件分配表、目录表等用于文件管理的磁盘空间。 动态磁盘管理 基本磁盘和动态磁盘的转换: 基本磁盘转换到动态磁盘：当前操作系统或者引导文件所在的磁盘升级需要重启后才能完成，基本磁盘的分区被转换为简单卷在转换磁盘之前，必须先关闭该磁盘运行的所有程序 动态磁盘可被转换为基本磁盘：只有将所有的卷删除后，才能进行 简单卷：单个磁盘上的空间，一个区域/连续的或不连续的多个区域可以被扩展（NTFS文件系统）没有存放当前使用的操作系统，或者不是通过简单卷启动计算机可扩展成更大的简单卷、跨区卷和镜像卷 跨区卷：由两块或多块硬盘上储存空间组成每块磁盘可以提供不同的磁盘空间可以扩展容量 带区卷：由两块或两块以上的硬盘组成，但是每块硬盘所贡献的空间大小必须相等读写效率高数据可靠性差 镜像卷：有且只有两块磁盘组成每块磁盘提供相同大小的空间支持容错，即一块硬盘损坏后数据不会丢失，磁盘空间利用率为50% RAID-5卷：至少需要三块硬盘，每块硬盘必须提供相同的磁盘空间提供容错功能，磁盘空间利用率为{n-1}\\over{n},n为磁盘数量。 五种卷对比 DHCP服务 为网络中计算机自动分配TCP/IP参数的协议 DHCP提供的TCP/IP配置 优点： 减少管理员的工作量 避免IP冲突 避免输入错误的可能 提高了IP地址的利用率 方便客户端配置 DHCP的分配方式 自动分配 分配到一个IP地址后永久使用 手动分配 由DHCP服务器管理员专门制定IP地址 动态分配 使用完后释放该IP，供其他客户机使用 DHCP的租约过程 租约过程分四个步骤 客户机请求IP 服务器响应 客户机选择IP 服务器确定租约 客户端重启 服务器正常 向服务器询问原来IP地址是否占用，如果占用，继续使用 如果占用，则重新开始四步DHCP请求过程 服务器无法访问 重新开始四步DHCP请求过程 客户端续租 客户端使用IP到租约50%，之后开始续租，如果服务正常，则续租。如果服务器无法访问，则继续使用原来IP，直到租约的87.5%，然后重新开始四步DHCP请求。 DNS 服务 DNS简介 早期使用Hosts文件解析域名，主机名称重复，主机维护困难 DNS（Domain Name System）域名系统 分布式 层次性 域名空间结构 根域：根（root）域就是“.”它是由Inetnet名字注册授权机构管理，该机构把域名空间各部分的管理责任分配连接到Internet的各个组织 顶级域：DNS根域的下一级就是顶级域，是由Inetnet名字授权机构管理。共有3种类型的顶级域 组织域，采用3各字符的代号，表示DNS域中包含的组织的主要功能与活动 国家或地区域，采用两个字符的国家或地区代号 反向域，这是一个特殊域，名称为in-addr.arpa，用于将IP地址映射到名称 二级域名：二级域注册到个人、组织或公司的名称。这些名称基于相应的顶级域，二级域下可以包括主机和子域。 主机名：主机名在域名空间结构的最底层，主机名和前面讲的域名结合构成FQDN（完全合格的域名），主机名是FQDN的最左端。 FQDN=主机名.DNS后缀 DNS 域名空间树形结构的一部分将域名空间根据需要划分为较小区域，一台DNS服务器内可存放多个区域文件，一个区域所包含的范围在一个域名空间中是连续的。 DNS查询过程 从查询方式分类 递归查询：客户端向DNS服务器的查询为递归查询，DNS服务器一定要返回地址，如果不知道可以查询其他DNS服务器。 迭代查询：一般DNS服务器之间是迭代查询，目标DNS可以向源DNS返回一个近似的结果，可以是其他的目标DNS地址，源DNS会向下一个目标DNS接着查询，直到得到正确的地址。 从查询内容分类 正向查询：由域名查找IP地址 反向查询：由IP地址查找域名 配置DNS服务器 提供DNS服务的必要条件： 有固定的IP地址 安装并启动DNS服务 有区域文件，配置转发器，或者配置根提示 转发器 具有特殊功能和应用的DNS服务器 将本地DNS服务器无法解析的查询，转发到网络上其他DNS服务器 可以设置条件转发 "},"network/6.VmwareNetAd.html":{"url":"network/6.VmwareNetAd.html","title":"VMware 网络模型","keywords":"","body":" VMware 网络模型 搬运地址 \"VM三种网络模式\" \"VM网络模型详解\" 四种常见网络模型 总的来说，目前有四种常见的网络模型： 桥接（Bridge Adapter） NAT 主机（Host-only Adapter） 内部网络（Internal） 这也是 VirtualBox 支持的四种模型，对于 VMware，则只有前三种。 下图显示了 VirtualBox 支持的几种网络模型： 1.桥接（Bridge Adapter） 虚拟机桥接网络模型就是使用虚拟交换机（Linux Bridge），将虚拟机和物理机连接起来，它们处于同一个网段，IP 地址是一样的。如下图所示： 在这种模式下，VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。 在桥接模式下，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信。 同时，由于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。如下图所示： 使用桥接模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。想让它们相互通讯，你就需要为虚拟系统配置IP地址和子网掩码，否则就无法通信。 在这种网络模型下，虚拟机和物理机都处在一个二层网络里面，所以有： 虚拟机之间彼此互通 虚拟机与主机彼此可以互通 桥接网络的好处是简单方便，但也有一个很明显的问题，就是一旦虚拟机太多，广播就会很严重。所以，桥接网络一般也只适用于桌面虚拟机或者小规模网络这种简单的形式。 2. NAT (Network Address Translation)即网络地址转换 桥接模式配置简单，但如果网络环境是ip资源很缺少或对ip管理比较严格，那桥接模式就不太适用 NAT NAT模式借助虚拟NAT设备和虚拟DHCP服务器，使得虚拟机可以联网。其网络结构如下图所示： 在NAT模式中，主机网卡直接与虚拟NAT设备相连，然后虚拟NAT设备与虚拟DHCP服务器一起连接在虚拟交换机VMnet8上，这样就实现了虚拟机联网。 NAT 与NAT 网络 这种模型严格来讲，又可以分为 NAT 和 NAT 网络两种，我们看上面的图 1 也可以看到。 根据 NAT 的原理，虚拟机所在的网络和物理机所在的网络不在同一个网段，虚拟机要访问物理所在网络必须经过一个地址转换的过程，也就是说在虚拟机网络内部需要内置一个虚拟的 NAT 设备来做这件事。 但其中 NAT 和 NAT 网络 两者还有些许的不同： NAT：主机上的虚拟机之间是互相隔离的，彼此不能通信（它们有独立的网络栈，独立的虚拟 NAT 设备） NAT 网络：虚拟机之间共享虚拟 NAT 设备，彼此互通。 如下图，展示了两者细微的差别： NAT 网络模式中一般还会内置一个虚拟的 DHCP 服务器来进行 IP 地址的管理。 通过实验来验证一下两种模式的区别，首先是 NAT 模式： 访问其他虚拟机： 可以看到，两个虚拟机由于有隔离的网络栈，所以它们的 IP 地址并不在一个网段，所以 ping 不通。 再看 NAT 网络，访问外网同样没问题，看下 VM 之间的互通： 可以看到，差别体现出来了，NAT 网络 虚拟机之间共享网络栈，它们的 IP 地址处于同一个网段，所以彼此是互通的。 总结一下，以上两种 NAT 模式，如果不做其他配置，那么有： 虚拟机可以访问主机，反之不行 如果主机可以上外网，那么虚拟机也可以 对于 NAT，同主机上的虚拟机之间不能互通 对于 NAT 网络，虚拟机之间可以互通 PS：如果做了 端口映射 配置，那么主机也可以访问虚拟机。 3. 主机网络（Host-only Adapter） 主机网络顾名思义，就是只限于主机内部访问的网络，虚拟机之间彼此互通，虚拟机与主机之间彼此互通。但是默认情况下虚拟机不能访问外网（注意：这里说的是默认情况下，如果稍作配置，也是可以的）。 主机网络看似简单，其实它的网络模型是相对比较复杂的，可以说前面几种模式实现的功能，在这种模式下，都可以通过虚拟机和网卡的配置来实现，这得益于它特殊的网络模型。 主机网络模型会在主机中模拟出一块虚拟网卡供虚拟机使用，所有虚拟机都连接到这块网卡上，这块网卡默认会使用网段 192.168.56.x（在主机的网络配置界面可以看到这块网卡），如下是基本的拓扑图示： 默认情况下，虚拟机之间可以互通，虚拟机只能和主机上的虚拟网卡互通，不能和不同网段的网卡互通，更不能访问外网，如果想要访问外网，那么需要如图中 红虚线 所示，将物理网卡和虚拟网卡桥接或共享。在主机上做如下设置即可： 通过以上配置，我们来验证一下，虚拟机可以访问主机物理网卡和外网： 4. 内部网络（internal） 最后一种网络模型是内部网络，这种模型是相对最简单的一种，虚拟机与外部环境完全断开，只允许虚拟机之间互相访问。 这种模型一般不怎么用，所以仅在virtualBox中有，VMware 虚拟机中没有这种网络模式。 5. 总结 虚拟机的四种网络模型：桥接、NAT、主机和内网模型。 下面以一张表来描述它们之间的通信行为： Model VM -> host host -> VM VM VM VM -> Internet Internet -> VM Bridged + + + + + NAT + Port Forwarding - + Port Forwarding NAT Network + Port Forwarding + + Port Forwarding Host-only + + + - - Internal - - + - - "},"software/software.html":{"url":"software/software.html","title":"基础服务","keywords":"","body":" Linux 基础之服务 DNS - dnsmasq NGINX - 编译安装 lamp - yum安装 "},"software/dnsmasq.html":{"url":"software/dnsmasq.html","title":"DNS - dnsmasq","keywords":"","body":" dnsmasq&安装&配置&详解 dnsmasq中文文档) dnsmasq详解 [DNSmasq] 安装&配置详解安装 yum install -y dnsmasq dnsmasq的解析流程 dnsmasq 先去解析hosts文件， 再去解析 /etc/dnsmasq.d/ 下的*.conf文件，并且这些文件的优先级要高于dnsmasq.conf，我们自定义的 resolv.dnsmasq.conf 中的DNS也被称为上游DNS，这是最后去查询解析的； hosts > /etc/dnsmasq.d/*.conf > dnsmasq.conf > resolv.dnsmasq.conf 如果不想用hosts文件做解析，我们可以在/etc/dnsmasq.conf中加入no-hosts这条语句，这样的话就直接查询上游DNS了，如果我们不想做上游查询，就是不想做正常的解析，我们可以加入no-reslov这条语句。 禁止hosts : /etc/dnsmasq.conf -> no-hosts 禁止/etc/resolv.conf : /etc/dnsmasq.conf -> no-reslov dnsmasq的参数及常用设置说明 具体参数 参数说明 resolv-file 定义dnsmasq从哪里获取上游DNS服务器的地址， 默认从/etc/resolv.conf获取。 strict-order 表示严格按照resolv-file文件中的顺序从上到下进行DNS解析，直到第一个解析成功为止。 listen-address 定义dnsmasq监听的地址，默认是监控本机的所有网卡上。 address 启用泛域名解析，即自定义解析a记录，例如：address=/long.com/192.168.115.10 访问long.com时的所有域名都会被解析成192.168.115.10 bogus-nxdomain 对于任何被解析到此 IP 的域名，将响应 NXDOMAIN 使其解析失效，可以多次指定通常用于对于访问不存在的域名，禁止其跳转到运营商的广告站点 server 指定使用哪个DNS服务器进行解析，对于不同的网站可以使用不同的域名对应解析。例如：server=/google.com/8.8.8.8 #表示对于google的服务，使用谷歌的DNS解析。 配置上游服务器地址 resolv-file配置Dnsmasq额外的上游的DNS服务器，如果不开启就使用Linux主机默认的/etc/resolv.conf里的nameserver。 通过下面的选项指定其他文件来管理上游的DNS服务器 $ vi /etc/dnsmasq.conf resolv-file=/etc/resolv.dnsmasq.conf 在指定文件中增加转发DNS的地址 $ vi /etc/resolv.dnsmasq.conf nameserver 8.8.8.8 nameserver 8.8.4.4 本地启用Dnsmasq解析 $ vi /etc/resolv.conf nameserver 127.0.0.1 添加解析记录 使用系统默认hosts 编辑hosts文件,简单列举一下格式 $ vi /etc/hosts 127.0.0.1 localhost 192.168.101.107 web01.mike.com web01 192.168.101.107 web02.mike.com web02 hosts文件的强大之处还在于能够劫持解析，譬如mirror.centos.org是CentOS仓库所在，几乎是机器正常必访问一个域名，我将它解析成一个内网地址，搭建一个内网镜像站，不仅内网机器也可以及时得到安全更新，每月还可以节省很多流量。 使用自定义hosts文件 修改配置，增加自定义hosts文件位置。 $ vi /etc/dnsmasq.conf addn-hosts=/etc/dnsmasq.hosts 在/etc/dnsmasq.hosts文件中添加DNS记录 $ vi /etc/dnsmasq.hosts 192.168.101.107 web01.mike.com web01 192.168.101.107 web02.mike.com web02 使用自定义conf $ vi /etc/dnsmasq.d/address.conf # 指定dnsmasq默认查询的上游服务器，此处以Google Public DNS为例。 server=8.8.8.8 server=8.8.4.4 # 把所有.cn的域名全部通过114.114.114.114这台国内DNS服务器来解析 server=/cn/114.114.114.114 # 给*.apple.com和taobao.com使用专用的DNS server=/taobao.com/223.5.5.5 server=/.apple.com/223.5.5.5 # 把www.hi-linux.com解析到特定的IP address=/www.hi-linux.com/192.168.101.107 在这里hi-linux.com相当于*.mike.com泛解析 address=/hi-linux.com/192.168.101.107 注：也可以直接添加到/etc/dnsmasq.conf中,不过/etc/dnsmasq.d/*.conf的优先级大于/etc/dnsmasq.conf。 修改iptables配置 允许本机的53端口可对外访问$ iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT $ iptables -A INPUT -p tcp -m tcp --dport 53 -j ACCEPT 转发DNS请求 # 开启流量转发功能 $ echo '1' > /proc/sys/net/ipv4/ip_forward $ echo '1' > /proc/sys/net/ipv6/ip_forward # IPv6 用户选用 # 添加流量转发规则，将外部到53的端口的请求映射到Dnsmasq服务器的53端口 $ iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 53 $ iptables -t nat -A PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports 53 # 如果要限制只允许内网的请求，方法如下 $ iptables -t nat -A PREROUTING -i eth1 -p upd --dport 53 -j REDIRECT --to-port 53 保存规则并重启$ service iptables save $ service iptables restart 一些Dnsmasq技巧 检查配置文件语法 [root@localhost ~]# dnsmasq -test dnsmasq: syntax check OK. Dnsmasq性能优化: 我们都知道Bind不配合数据库的情况下，经常需要重新载入并读取配置文件，这是造成性能低下的原因。 根据这点教训，我们可以考虑不读取/etc/hosts文件。而是另外指定一个在共享内存里的文件，比如/dev/shm/dnsrecord.txt ，这样就不费劲了，又由于内存的非持久性，重启就消失，可以定期同步硬盘上的某个内容到内存文件中。 具体实现步骤: 配置dnsmasq $ vim /etc/dnsmasq.conf no-hosts addn-hosts=/dev/shm/dnsrecord.txt 解决同步问题开机启动 $ echo \"cat /etc/hosts > /dev/shm/dnsrecord.txt\" >>/etc/rc.local # 定时同步内容 $ crontab -e */10 * * * * cat /etc/hosts > /dev/shm/dnsrecord.txt Dnsmasq快速选择上游DNS服务器 经常会有这样的情景，Dnsmasq服务器配了一堆上游服务器，转发本地的dns请求，缺省是Dnsmasq事实上是只挑了一个上游dns服务器来查询并转发结果，这样如果选错服务器的话会导致DNS响应变慢。 解决方法: $ vi /etc/dnsmasq.conf all-servers server=8.8.8.8 server=219.141.136.10 all-servers表示对以下设置的所有server发起查询，选择回应最快的一条作为查询结果返回。 上面我们设置了两个dns server，8.8.8.8(谷歌dns)和219.141.136.10(移动的dns)，会同时查询这两个服务器，询问dns地址谁返回快就采用谁的结果。 dnsmasq-china-list项目 dnsmasq-china-list项目维护了一张国内常用但是通过国外DNS会解析错误的网站域名的列表，保证List中的国内域名全部走国内DNS服务器解析。 项目地址: https://github.com/felixonmars/dnsmasq-china-list dnsmasq-china-list使用 取消dnsmasq.conf里conf-dir=/etc/dnsmasq.d这一行的注释 获取项目文件 将accelerated-domains.china.conf, bogus-nxdomain.china.conf,google.china.conf(可选)放到/etc/dnsmasq.d/目录下(如目录不存在则建立一个)。 将dnsmasq-update-china-list放到/usr/bin/，这是一个批量修改DNS服务器的工具(可选)。 $ git clone https://github.com/felixonmars/dnsmasq-china-list.git dnsmasq配置文件 注解时间：2019年08月12日02:17:36 更新至405行 # Configuration file for dnsmasq. # dnsmasq 配置文件 # # Format is one option per line, legal options are the same # as the long options legal on the command line. See # \"/usr/sbin/dnsmasq --help\" or \"man 8 dnsmasq\" for details. # 格式是每行一个选项，合法选项与命令行上的长选项合法相同。 # 有关详细信息，请参阅“/ usr / sbin / dnsmasq --help”或“man 8 dnsmasq”。 # Listen on this specific port instead of the standard DNS port # (53). Setting this to zero completely disables DNS function, # leaving only DHCP and/or TFTP. # 侦听此特定端口而不是标准DNS端口（53）。 # 将此设置为零将完全禁用DNS功能，仅保留DHCP和/或TFTP。 #port=5353 # The following two options make you a better netizen, since they # tell dnsmasq to filter out queries which the public DNS cannot # answer, and which load the servers (especially the root servers) # unnecessarily. If you have a dial-on-demand link they also stop # these requests from bringing up the link unnecessarily. # 以下两个选项使您成为更好的网友，因为它们告诉dnsmasq过滤掉公共DNS无法回答的查询， # 以及不必要地加载服务器（尤其是根服务器）的查询。 如果您有按需拨号链接，他们也会阻止这些请求不必要地显示链接。 # {大体来讲就是：1.哪些公共DNS没有回答 2.哪些root根域不可达。} # Never forward plain names (without a dot or domain part) # 永远不要转发普通名称（没有点或域部分）{格式错误的域名} #domain-needed # Never forward addresses in the non-routed address spaces. # 切勿转发非路由地址空间中的地址。{不在路由地址中的域名} #bogus-priv # Uncomment these to enable DNSSEC validation and caching: # (Requires dnsmasq to be built with DNSSEC option.) # 取消注释以启用DNSSEC验证和缓存：（需要使用DNSSEC选项构建dnsmasq。） #conf-file=%%PREFIX%%/share/dnsmasq/trust-anchors.conf #dnssec # Replies which are not DNSSEC signed may be legitimate, because the domain # is unsigned, or may be forgeries. Setting this option tells dnsmasq to # check that an unsigned reply is OK, by finding a secure proof that a DS # record somewhere between the root and the domain does not exist. # The cost of setting this is that even queries in unsigned domains will need one or more extra DNS queries to verify. # 因为域名未签名，未签署DNSSEC的回复可能是合法的，或者可能是伪造的。 # 设置此选项会通过查找根目录和域之间某处的DS记录不存在的安全证据来告知dnsmasq检查未签名的答复是否正常。 # 设置此成本的成本是，即使是未签名域中的查询，也需要一个或多个额外的DNS查询来验证。 #dnssec-check-unsigned # Uncomment this to filter useless windows-originated DNS requests # which can trigger dial-on-demand links needlessly. # Note that (amongst other things) this blocks all SRV requests, # so don't use it if you use eg Kerberos, SIP, XMMP or Google-talk. # This option only affects forwarding, SRV records originating for # dnsmasq (via srv-host= lines) are not suppressed by it. # 取消注释以过滤无用的Windows发起的DNS请求，这些请求可以不必要地触发按需拨号链接。 # 请注意（除此之外）这会阻止所有SRV请求，因此如果您使用例如Kerberos，SIP，XMMP或Google-talk，请不要使用它。 # 此选项仅影响转发，源自dnsmasq的SRV记录（通过srv-host = lines）不会被它抑制。 #filterwin2k # Change this line if you want dns to get its upstream servers from # somewhere other that /etc/resolv.conf # 如果您希望dns从/etc/resolv.conf以外的某个位置获取其上游服务器，请更改此行。 # 如果不开启就使用默认的/etc/resolv.conf里的nameserver，通过下面选项指定他的文件。 resolv-file=/etc/resolv.dnsmasq.conf # By default, dnsmasq will send queries to any of the upstream # servers it knows about and tries to favour servers to are known # to be up. Uncommenting this forces dnsmasq to try each query # with each server strictly in the order they appear in # /etc/resolv.conf # 默认情况下，dnsmasq 将向其知道的任何上游服务器发送查询，并尝试使用已知的服务器。 # 取消注释这会强制 dnsmasq 严格按照它们在 /etc/resolv.conf 中出现的顺序尝试每个查询服务器的每个查询。{resolv.conf的顺序查询} #strict-order # If you don't want dnsmasq to read /etc/resolv.conf or any other # file, getting its servers from this file instead (see below), then # uncomment this. # 如果您不希望 dnsmasq 读取 /etc/resolv.conf 或任何其他文件，请从此文件中获取其服务器（请参阅下文），然后取消注释。 # {只读取本文件，不再读取其他配置文件：resolv、hosts等} #no-resolv # If you don't want dnsmasq to poll /etc/resolv.conf or other resolv # files for changes and re-read them then uncomment this. # 如果您不希望dnsmasq轮询/etc/resolv.conf或 # 其他resolv文件进行更改并重新读取它们，请取消注释。 #no-poll # Add other name servers here, with domain specs if they are for # non-public domains. # 在此处添加其他域名服务器，如果它们适用于非公共域，则使用域规范。{一般用于内网域名} #server=/localnet/192.168.0.1 server=/web.jdf.lan/192.168.111.2 # Example of routing PTR queries to nameservers: this will send all # address->name queries for 192.168.3/24 to nameserver 10.1.2.3 # 将PTR查询路由到域名服务器的示例：这会将192.168.3/24的所有地址 -> 名称查询发送到域名服务器10.1.2.3 # {设置一个反向解析，所有192.168.3.0/24的地址都到10.1.2.3去解析} #server=/3.168.192.in-addr.arpa/10.1.2.3 # Add local-only domains here, queries in these domains are answered # from /etc/hosts or DHCP only. # 在此处添加仅限本地的域，这些域中的查询仅从/etc/hosts 或DHCP回答。 # {增加一个本地域名，会在/etc/hosts中进行查询} #local=/localnet/ # Add domains which you want to force to an IP address here. # The example below send any host in double-click.net to a local # web-server. # 在此处添加要强制为IP地址的域。 以下示例将double-click.net中的任何主机发送到本地Web服务器。 # {增加一个域名，强制解析到你指定的地址上} #address=/double-click.net/127.0.0.1 # --address (and --server) work with IPv6 addresses too. # --address（和--server）也可以使用IPv6地址。 #address=/www.thekelleys.org.uk/fe80::20d:60ff:fe36:f83 # Add the IPs of all queries to yahoo.com, google.com, and their # subdomains to the vpn and search ipsets: # 将所有查询的IP添加到yahoo.com，google.com及其子域到vpn并搜索ipsets： #ipset=/yahoo.com/google.com/vpn,search # You can control how dnsmasq talks to a server: this forces # queries to 10.1.2.3 to be routed via eth1 # 您可以控制dnsmasq如何与服务器通信：这会强制执行 # 查询要通过eth1路由到10.1.2.3 # {可以控制Dnsmasq和Server之间的查询从哪个网卡出去} # server=10.1.2.3@eth1 # and this sets the source (ie local) address used to talk to # 10.1.2.3 to 192.168.1.1 port 55 (there must be an interface with that # IP on the machine, obviously). # 这设置了用于与10.1.2.3到192.168.1.1端口55通信的源（即本地）地址 #（显然，机器上必须有一个具有该IP的接口）。 # {可以控制Dnsmasq和Server之间的查询从哪个网卡出去} # server=10.1.2.3@192.168.1.1#55 # If you want dnsmasq to change uid and gid to something other # than the default, edit the following lines. # 如果您希望dnsmasq将uid和gid更改为默认值以外的其他内容，请编辑以下行。 # {改变Dnsmasq默认的uid和gid} #user= #group= # If you want dnsmasq to listen for DHCP and DNS requests only on # specified interfaces (and the loopback) give the name of the # interface (eg eth0) here. # Repeat the line for more than one interface. # 如果您希望dnsmasq仅在指定的接口（和环回）上侦听DHCP和DNS请求， # 请在此处提供接口的名称（例如eth0）。 对多个接口重复该行。 # {如果你想Dnsmasq监听某个端口为dhcp、dns提供服务} interface=eth1 # Or you can specify which interface _not_ to listen on # 或者您可以指定不要监听的接口 # {你还可以指定哪个端口你不想监听} #except-interface= # Or which to listen on by address (remember to include 127.0.0.1 if # you use this.) # 或者通过地址收听哪些（如果使用此地址，请记住包含127.0.0.1。） # {设置想监听的地址，如果你本机要使用写上127.0.0.1。} listen-address=192.168.111.1 # If you want dnsmasq to provide only DNS service on an interface, # configure it as shown above, and then use the following line to # disable DHCP and TFTP on it. # 如果您希望dnsmasq仅在接口上提供DNS服务，请按上图所示进行配置，然后使用以下行禁用DHCP和TFTP。 # {如果你想在某个端口只提供dns服务，则可以进行配置禁止dhcp服务} #no-dhcp-interface= # On systems which support it, dnsmasq binds the wildcard address, # even when it is listening on only some interfaces. It then discards # requests that it shouldn't reply to. This has the advantage of # working even when interfaces come and go and change address. If you # want dnsmasq to really bind only the interfaces it is listening on, # uncomment this option. About the only time you may need this is when # running another nameserver on the same machine. # 在支持它的系统上，dnsmasq绑定通配符地址，即使它只侦听某些接口。 # 然后它丢弃它不应该回复的请求。 即使接口来来去去改变地址，这也具有工作的优点。 # 如果您希望dnsmasq仅绑定它正在侦听的接口，请取消注释此选项。 # 关于您可能需要的唯一时间是在同一台计算机上运行另一个域名服务器。 #bind-interfaces # If you don't want dnsmasq to read /etc/hosts, uncomment the # following line. # 如果您不希望dnsmasq读取/etc/hosts，请取消注释以下行。 # {如果你不想使用/etc/hosts，则取消下面的注释} no-hosts # or if you want it to read another file, as well as /etc/hosts, use # this. # 或者如果你想让它读取另一个文件，以及/etc/hosts，请使用它。 # {如果你项读取其他类似/etc/hosts文件，则进行配置} #addn-hosts=/etc/banner_add_hosts # Set this (and domain: see below) if you want to have a domain # automatically added to simple names in a hosts-file. # 如果要将域自动添加到hosts文件中的简单名称，请设置此（和域：见下文）。 # {自动的给hosts中的name增加一个域名} #expand-hosts # Set the domain for dnsmasq. this is optional, but if it is set, it # does the following things. # 为dnsmasq设置域。 这是可选的，但是如果设置它，它会执行以下操作。 # 1) Allows DHCP hosts to have fully qualified domain names, as long # as the domain part matches this setting. # 允许DHCP主机具有完全限定的域名，只要域部分与此设置匹配即可。 # 2) Sets the \"domain\" DHCP option thereby potentially setting the # domain of all systems configured by DHCP # 设置“域”DHCP选项，从而可能设置DHCP配置的所有系统的域 # 3) Provides the domain part for \"expand-hosts\" # 为“expand-hosts”提供域部分 # {给dhcp服务赋予一个域名} #domain=thekelleys.org.uk # Set a different domain for a particular subnet # 为特定子网设置不同的域 # {给dhcp的一个子域赋予一个不同的域名} #domain=wireless.thekelleys.org.uk,192.168.2.0/24 # Same idea, but range rather then subnet # {同上，不过子域是一个范围} #domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200 # Uncomment this to enable the integrated DHCP server, you need # to supply the range of addresses available for lease and optionally # a lease time. If you have more than one network, you will need to # repeat this for each network on which you want to supply DHCP # service. # {dhcp分发ip的范围，以及每个ip的租约时间} dhcp-range=192.168.111.1,192.168.111.10,12h # This is an example of a DHCP range where the netmask is given. This # is needed for networks we reach the dnsmasq DHCP server via a relay # agent. If you don't know what a DHCP relay agent is, you probably # don't need to worry about this. # 这是给出网络掩码的DHCP范围的示例。 这是我们通过中继代理到达dnsmasq DHCP服务器的网络所必需的。 # 如果您不知道DHCP中继代理是什么，您可能不需要担心这一点。 # {同上，不过给出了掩码} #dhcp-range=192.168.0.50,192.168.0.150,255.255.255.0,12h # This is an example of a DHCP range which sets a tag, so that # some DHCP options may be set only for this network. # 这是设置标记的DHCP范围的示例，因此可以仅为该网络设置一些DHCP选项。 #dhcp-range=set:red,192.168.0.50,192.168.0.150 # Use this DHCP range only when the tag \"green\" is set. # 仅在设置了“绿色”标记时才使用此DHCP范围。 #dhcp-range=tag:green,192.168.0.50,192.168.0.150,12h # Specify a subnet which can't be used for dynamic address allocation, # is available for hosts with matching --dhcp-host lines. Note that # dhcp-host declarations will be ignored unless there is a dhcp-range # of some type for the subnet in question. # In this case the netmask is implied (it comes from the network # configuration on the machine running dnsmasq) it is possible to give # an explicit netmask instead. # 指定不能用于动态地址分配的子网，可用于具有匹配的--dhcp-host行的主机。 # 请注意，除非有相关子网的某种类型的dhcp-range，否则将忽略dhcp-host声明。 # 在这种情况下，隐含了网络掩码（它来自运行dnsmasq的计算机上的网络配置），可以提供明确的网络掩码。 #dhcp-range=192.168.0.0,static # Enable DHCPv6. Note that the prefix-length does not need to be specified # and defaults to 64 if missing/ # 启用DHCPv6。 请注意，不需要指定prefix-length，如果缺少/则默认为64 #dhcp-range=1234::2, 1234::500, 64, 12h # Do Router Advertisements, BUT NOT DHCP for this subnet. # 做路由器广告，但不是这个子网的DHCP。 #dhcp-range=1234::, ra-only # Do Router Advertisements, BUT NOT DHCP for this subnet, also try and # add names to the DNS for the IPv6 address of SLAAC-configured dual-stack # hosts. Use the DHCPv4 lease to derive the name, network segment and # MAC address and assume that the host will also have an # IPv6 address calculated using the SLAAC algorithm. # 做路由器广告，但不是该子网的DHCP，也尝试为DNS添加SLAAC配置的双栈主机的IPv6地址名称。 # 使用DHCPv4租约来获取名称，网段和MAC地址，并假设主机还将使用SLAAC算法计算IPv6地址。 #dhcp-range=1234::, ra-names # Do Router Advertisements, BUT NOT DHCP for this subnet. # Set the lifetime to 46 hours. (Note: minimum lifetime is 2 hours.) # 做路由器广告，但不是这个子网的DHCP。 将生命周期设置为46小时。 （注意：最短寿命为2小时。） #dhcp-range=1234::, ra-only, 48h # Do DHCP and Router Advertisements for this subnet. Set the A bit in the RA # so that clients can use SLAAC addresses as well as DHCP ones. # 为此子网执行DHCP和路由器通告。 设置RA中的A位，以便客户端可以使用SLAAC地址和DHCP地址。 #dhcp-range=1234::2, 1234::500, slaac # Do Router Advertisements and stateless DHCP for this subnet. Clients will # not get addresses from DHCP, but they will get other configuration information. # They will use SLAAC for addresses. # 为此子网执行路由器通告和无状态DHCP。 # 客户端不会从DHCP获取地址，但是他们将获得其他配置信息。 他们将使用SLAAC作为地址。 #dhcp-range=1234::, ra-stateless # Do stateless DHCP, SLAAC, and generate DNS names for SLAAC addresses # from DHCPv4 leases. # 为DHCPv4租约中的SLAAC地址执行无状态DHCP，SLAAC和生成DNS名称。 #dhcp-range=1234::, ra-stateless, ra-names # Do router advertisements for all subnets where we're doing DHCPv6 # Unless overridden by ra-stateless, ra-names, et al, the router # advertisements will have the M and O bits set, so that the clients # get addresses and configuration from DHCPv6, and the A bit reset, so the # clients don't use SLAAC addresses. # 为我们正在进行DHCPv6的所有子网做路由器广告除非被ra-stateless，ra-names等覆盖， # 否则路由器通告将设置M和O位，以便客户端从DHCPv6获取地址和配置，以及A位复位，因此客户端不使用SLAAC地址。 #enable-ra # Supply parameters for specified hosts using DHCP. There are lots # of valid alternatives, so we will give examples of each. Note that # IP addresses DO NOT have to be in the range given above, they just # need to be on the same network. The order of the parameters in these # do not matter, it's permissible to give name, address and MAC in any # order. # 使用DHCP为指定主机提供参数。 有很多有效的替代方案，因此我们将举例说明。 # 请注意，IP地址不必在上面给出的范围内，它们只需要在同一网络上。 # 这些参数的顺序无关紧要，允许以任何顺序给出名称，地址和MAC。 # Always allocate the host with Ethernet address 11:22:33:44:55:66 # The IP address 192.168.0.60 # 始终使用以太网地址11：22：33：44：55：66分配主机IP地址192.168.0.60 # {按照Mac地址分配IP} #dhcp-host=11:22:33:44:55:66,192.168.0.60 dhcp-host=08:00:27:b4:c2:15,192.168.111.2,web.jgf.lan # Always set the name of the host with hardware address # 始终使用硬件地址设置主机的名称 # 11:22:33:44:55:66 to be \"fred\" #dhcp-host=11:22:33:44:55:66,fred # Always give the host with Ethernet address 11:22:33:44:55:66 # the name fred and IP address 192.168.0.60 and lease time 45 minutes # 始终给主机提供以太网地址11：22：33：44：55：66名称fred和IP地址192.168.0.60和租用时间45分钟 #dhcp-host=11:22:33:44:55:66,fred,192.168.0.60,45m # Give a host with Ethernet address 11:22:33:44:55:66 or # 12:34:56:78:90:12 the IP address 192.168.0.60. Dnsmasq will assume # that these two Ethernet interfaces will never be in use at the same # time, and give the IP address to the second, even if it is already # in use by the first. Useful for laptops with wired and wireless # addresses. # 为主机提供以太网地址11：22：33：44：55：66或12：34：56：78：90：12 IP地址192.168.0.60。 # Dnsmasq将假设这两个以太网接口永远不会同时使用，并将IP地址提供给第二个，即使它已被第一个使用。 # 适用于有线和无线地址的笔记本电脑。 #dhcp-host=11:22:33:44:55:66,12:34:56:78:90:12,192.168.0.60 # Give the machine which says its name is \"bert\" IP address # 192.168.0.70 and an infinite lease # 给名称为“bert”IP地址192.168.0.70的机器和无限租约 #dhcp-host=bert,192.168.0.70,infinite # Always give the host with client identifier 01:02:02:04 # the IP address 192.168.0.60 # 始终为主机提供客户端标识符01：02：02：04 IP地址192.168.0.60 #dhcp-host=id:01:02:02:04,192.168.0.60 # Always give the InfiniBand interface with hardware address # 80:00:00:48:fe:80:00:00:00:00:00:00:f4:52:14:03:00:28:05:81 the # ip address 192.168.0.61. The client id is derived from the prefix # ff:00:00:00:00:00:02:00:00:02:c9:00 and the last 8 pairs of # hex digits of the hardware address. # 始终给InfiniBand接口提供硬件地址： # 80：00：00：48：fe：80：00：00：00：00：00：00：f4：52：14：03：00：28：05：81 # ip地址：192.168.0.61。 # 客户端ID源自前缀： # ff：00：00：00：00：00：02：00：00：02：c9：00 以及硬件地址的最后8对十六进制数字。 #dhcp-host=id:ff:00:00:00:00:00:02:00:00:02:c9:00:f4:52:14:03:00:28:05:81,192.168.0.61 # Always give the host with client identifier \"marjorie\" # the IP address 192.168.0.60 # 始终为主机提供客户端标识符“marjorie”，IP地址为192.168.0.60 #dhcp-host=id:marjorie,192.168.0.60 # Enable the address given for \"judge\" in /etc/hosts # to be given to a machine presenting the name \"judge\" when # it asks for a DHCP lease. # 在/etc/hosts中为“判断”提供的地址在它要求DHCP租约时被提供给名称为“judge”的机器。 #dhcp-host=judge # Never offer DHCP service to a machine whose Ethernet # address is 11:22:33:44:55:66 # 切勿向以太网地址为11：22：33：44：55：66的计算机提供DHCP服务 #dhcp-host=11:22:33:44:55:66,ignore # Ignore any client-id presented by the machine with Ethernet # address 11:22:33:44:55:66. This is useful to prevent a machine # being treated differently when running under different OS's or # between PXE boot and OS boot. # 忽略机器提供的任何客户机ID，以太网地址为11：22：33：44：55：66。 # 这有助于防止在不同操作系统下运行或在PXE引导和操作系统引导之间对机器进行不同的处理。 #dhcp-host=11:22:33:44:55:66,id:* # Send extra options which are tagged as \"red\" to # the machine with Ethernet address 11:22:33:44:55:66 # 将标记为“红色”的额外选项发送到具有以太网地址11：22：33：44：55：66的机器 #dhcp-host=11:22:33:44:55:66,set:red # Send extra options which are tagged as \"red\" to # any machine with Ethernet address starting 11:22:33: #dhcp-host=11:22:33:*:*:*,set:red # Give a fixed IPv6 address and name to client with # DUID 00:01:00:01:16:d2:83:fc:92:d4:19:e2:d8:b2 # Note the MAC addresses CANNOT be used to identify DHCPv6 clients. # Note also that the [] around the IPv6 address are obligatory. #dhcp-host=id:00:01:00:01:16:d2:83:fc:92:d4:19:e2:d8:b2, fred, [1234::5] # Ignore any clients which are not specified in dhcp-host lines # or /etc/ethers. Equivalent to ISC \"deny unknown-clients\". # This relies on the special \"known\" tag which is set when # a host is matched. #dhcp-ignore=tag:!known # Send extra options which are tagged as \"red\" to any machine whose # DHCP vendorclass string includes the substring \"Linux\" #dhcp-vendorclass=set:red,Linux # Send extra options which are tagged as \"red\" to any machine one # of whose DHCP userclass strings includes the substring \"accounts\" #dhcp-userclass=set:red,accounts # Send extra options which are tagged as \"red\" to any machine whose # MAC address matches the pattern. #dhcp-mac=set:red,00:60:8C:*:*:* # If this line is uncommented, dnsmasq will read /etc/ethers and act # on the ethernet-address/IP pairs found there just as if they had # been given as --dhcp-host options. Useful if you keep # MAC-address/host mappings there for other purposes. #read-ethers # Send options to hosts which ask for a DHCP lease. # See RFC 2132 for details of available options. # Common options can be given to dnsmasq by name: # run \"dnsmasq --help dhcp\" to get a list. # Note that all the common settings, such as netmask and # broadcast address, DNS server and default route, are given # sane defaults by dnsmasq. You very likely will not need # any dhcp-options. If you use Windows clients and Samba, there # are some options which are recommended, they are detailed at the # end of this section. # Override the default route supplied by dnsmasq, which assumes the # router is the same machine as the one running dnsmasq. #dhcp-option=3,1.2.3.4 # Do the same thing, but using the option name #dhcp-option=option:router,1.2.3.4 dhcp-option=option:router,192.168.111.1 # Override the default route supplied by dnsmasq and send no default # route at all. Note that this only works for the options sent by # default (1, 3, 6, 12, 28) the same line will send a zero-length option # for all other option numbers. #dhcp-option=3 # Set the NTP time server addresses to 192.168.0.4 and 10.10.0.5 #dhcp-option=option:ntp-server,192.168.0.4,10.10.0.5 # Send DHCPv6 option. Note [] around IPv6 addresses. #dhcp-option=option6:dns-server,[1234::77],[1234::88] dhcp-option=option:dns-server,192.168.111.1 # Send DHCPv6 option for namservers as the machine running # dnsmasq and another. #dhcp-option=option6:dns-server,[::],[1234::88] # Ask client to poll for option changes every six hours. (RFC4242) #dhcp-option=option6:information-refresh-time,6h # Set option 58 client renewal time (T1). Defaults to half of the # lease time if not specified. (RFC2132) #dhcp-option=option:T1,1m # Set option 59 rebinding time (T2). Defaults to 7/8 of the # lease time if not specified. (RFC2132) #dhcp-option=option:T2,2m # Set the NTP time server address to be the same machine as # is running dnsmasq #dhcp-option=42,0.0.0.0 # Set the NIS domain name to \"welly\" #dhcp-option=40,welly # Set the default time-to-live to 50 #dhcp-option=23,50 # Set the \"all subnets are local\" flag #dhcp-option=27,1 # Send the etherboot magic flag and then etherboot options (a string). #dhcp-option=128,e4:45:74:68:00:00 #dhcp-option=129,NIC=eepro100 # Specify an option which will only be sent to the \"red\" network # (see dhcp-range for the declaration of the \"red\" network) # Note that the tag: part must precede the option: part. #dhcp-option = tag:red, option:ntp-server, 192.168.1.1 # The following DHCP options set up dnsmasq in the same way as is specified # for the ISC dhcpcd in # http://www.samba.org/samba/ftp/docs/textdocs/DHCP-Server-Configuration.txt # adapted for a typical dnsmasq installation where the host running # dnsmasq is also the host running samba. # you may want to uncomment some or all of them if you use # Windows clients and Samba. #dhcp-option=19,0 # option ip-forwarding off #dhcp-option=44,0.0.0.0 # set netbios-over-TCP/IP nameserver(s) aka WINS server(s) #dhcp-option=45,0.0.0.0 # netbios datagram distribution server #dhcp-option=46,8 # netbios node type # Send an empty WPAD option. This may be REQUIRED to get windows 7 to behave. #dhcp-option=252,\"\\n\" # Send RFC-3397 DNS domain search DHCP option. WARNING: Your DHCP client # probably doesn't support this...... #dhcp-option=option:domain-search,eng.apple.com,marketing.apple.com # Send RFC-3442 classless static routes (note the netmask encoding) #dhcp-option=121,192.168.1.0/24,1.2.3.4,10.0.0.0/8,5.6.7.8 # Send vendor-class specific options encapsulated in DHCP option 43. # The meaning of the options is defined by the vendor-class so # options are sent only when the client supplied vendor class # matches the class given here. (A substring match is OK, so \"MSFT\" # matches \"MSFT\" and \"MSFT 5.0\"). This example sets the # mtftp address to 0.0.0.0 for PXEClients. #dhcp-option=vendor:PXEClient,1,0.0.0.0 # Send microsoft-specific option to tell windows to release the DHCP lease # when it shuts down. Note the \"i\" flag, to tell dnsmasq to send the # value as a four-byte integer - that's what microsoft wants. See # http://technet2.microsoft.com/WindowsServer/en/library/a70f1bb7-d2d4-49f0-96d6-4b7414ecfaae1033.mspx?mfr=true #dhcp-option=vendor:MSFT,2,1i # Send the Encapsulated-vendor-class ID needed by some configurations of # Etherboot to allow is to recognise the DHCP server. #dhcp-option=vendor:Etherboot,60,\"Etherboot\" # Send options to PXELinux. Note that we need to send the options even # though they don't appear in the parameter request list, so we need # to use dhcp-option-force here. # See http://syslinux.zytor.com/pxe.php#special for details. # Magic number - needed before anything else is recognised #dhcp-option-force=208,f1:00:74:7e # Configuration file name #dhcp-option-force=209,configs/common # Path prefix #dhcp-option-force=210,/tftpboot/pxelinux/files/ # Reboot time. (Note 'i' to send 32-bit value) #dhcp-option-force=211,30i # Set the boot filename for netboot/PXE. You will only need # this if you want to boot machines over the network and you will need # a TFTP server; either dnsmasq's built-in TFTP server or an # external one. (See below for how to enable the TFTP server.) #dhcp-boot=pxelinux.0 # The same as above, but use custom tftp-server instead machine running dnsmasq #dhcp-boot=pxelinux,server.name,192.168.1.100 # Boot for iPXE. The idea is to send two different # filenames, the first loads iPXE, and the second tells iPXE what to # load. The dhcp-match sets the ipxe tag for requests from iPXE. #dhcp-boot=undionly.kpxe #dhcp-match=set:ipxe,175 # iPXE sends a 175 option. #dhcp-boot=tag:ipxe,http://boot.ipxe.org/demo/boot.php # Encapsulated options for iPXE. All the options are # encapsulated within option 175 #dhcp-option=encap:175, 1, 5b # priority code #dhcp-option=encap:175, 176, 1b # no-proxydhcp #dhcp-option=encap:175, 177, string # bus-id #dhcp-option=encap:175, 189, 1b # BIOS drive code #dhcp-option=encap:175, 190, user # iSCSI username #dhcp-option=encap:175, 191, pass # iSCSI password # Test for the architecture of a netboot client. PXE clients are # supposed to send their architecture as option 93. (See RFC 4578) #dhcp-match=peecees, option:client-arch, 0 #x86-32 #dhcp-match=itanics, option:client-arch, 2 #IA64 #dhcp-match=hammers, option:client-arch, 6 #x86-64 #dhcp-match=mactels, option:client-arch, 7 #EFI x86-64 # Do real PXE, rather than just booting a single file, this is an # alternative to dhcp-boot. #pxe-prompt=\"What system shall I netboot?\" # or with timeout before first available action is taken: #pxe-prompt=\"Press F8 for menu.\", 60 # Available boot services. for PXE. #pxe-service=x86PC, \"Boot from local disk\" # Loads /pxelinux.0 from dnsmasq TFTP server. #pxe-service=x86PC, \"Install Linux\", pxelinux # Loads /pxelinux.0 from TFTP server at 1.2.3.4. # Beware this fails on old PXE ROMS. #pxe-service=x86PC, \"Install Linux\", pxelinux, 1.2.3.4 # Use bootserver on network, found my multicast or broadcast. #pxe-service=x86PC, \"Install windows from RIS server\", 1 # Use bootserver at a known IP address. #pxe-service=x86PC, \"Install windows from RIS server\", 1, 1.2.3.4 # If you have multicast-FTP available, # information for that can be passed in a similar way using options 1 # to 5. See page 19 of # http://download.intel.com/design/archives/wfm/downloads/pxespec.pdf # Enable dnsmasq's built-in TFTP server #enable-tftp # Set the root directory for files available via FTP. #tftp-root=/var/ftpd # Do not abort if the tftp-root is unavailable #tftp-no-fail # Make the TFTP server more secure: with this set, only files owned by # the user dnsmasq is running as will be send over the net. #tftp-secure # This option stops dnsmasq from negotiating a larger blocksize for TFTP # transfers. It will slow things down, but may rescue some broken TFTP # clients. #tftp-no-blocksize # Set the boot file name only when the \"red\" tag is set. #dhcp-boot=tag:red,pxelinux.red-net # An example of dhcp-boot with an external TFTP server: the name and IP # address of the server are given after the filename. # Can fail with old PXE ROMS. Overridden by --pxe-service. #dhcp-boot=/var/ftpd/pxelinux.0,boothost,192.168.0.3 # If there are multiple external tftp servers having a same name # (using /etc/hosts) then that name can be specified as the # tftp_servername (the third option to dhcp-boot) and in that # case dnsmasq resolves this name and returns the resultant IP # addresses in round robin fashion. This facility can be used to # load balance the tftp load among a set of servers. #dhcp-boot=/var/ftpd/pxelinux.0,boothost,tftp_server_name # Set the limit on DHCP leases, the default is 150 #dhcp-lease-max=150 # The DHCP server needs somewhere on disk to keep its lease database. # This defaults to a sane location, but if you want to change it, use # the line below. #dhcp-leasefile=/var/lib/misc/dnsmasq.leases # Set the DHCP server to authoritative mode. In this mode it will barge in # and take over the lease for any client which broadcasts on the network, # whether it has a record of the lease or not. This avoids long timeouts # when a machine wakes up on a new network. DO NOT enable this if there's # the slightest chance that you might end up accidentally configuring a DHCP # server for your campus/company accidentally. The ISC server uses # the same option, and this URL provides more information: # http://www.isc.org/files/auth.html #dhcp-authoritative # Set the DHCP server to enable DHCPv4 Rapid Commit Option per RFC 4039. # In this mode it will respond to a DHCPDISCOVER message including a Rapid Commit # option with a DHCPACK including a Rapid Commit option and fully committed address # and configuration information. This must only be enabled if either the server is # the only server for the subnet, or multiple servers are present and they each # commit a binding for all clients. #dhcp-rapid-commit # Run an executable when a DHCP lease is created or destroyed. # The arguments sent to the script are \"add\" or \"del\", # then the MAC address, the IP address and finally the hostname # if there is one. #dhcp-script=/bin/echo # Set the cachesize here. #cache-size=150 # If you want to disable negative caching, uncomment this. #no-negcache # Normally responses which come from /etc/hosts and the DHCP lease # file have Time-To-Live set as zero, which conventionally means # do not cache further. If you are happy to trade lower load on the # server for potentially stale date, you can set a time-to-live (in # seconds) here. #local-ttl= # If you want dnsmasq to detect attempts by Verisign to send queries # to unregistered .com and .net hosts to its sitefinder service and # have dnsmasq instead return the correct NXDOMAIN response, uncomment # this line. You can add similar lines to do the same for other # registries which have implemented wildcard A records. #bogus-nxdomain=64.94.110.11 # If you want to fix up DNS results from upstream servers, use the # alias option. This only works for IPv4. # This alias makes a result of 1.2.3.4 appear as 5.6.7.8 #alias=1.2.3.4,5.6.7.8 # and this maps 1.2.3.x to 5.6.7.x #alias=1.2.3.0,5.6.7.0,255.255.255.0 # and this maps 192.168.0.10->192.168.0.40 to 10.0.0.10->10.0.0.40 #alias=192.168.0.10-192.168.0.40,10.0.0.0,255.255.255.0 # Change these lines if you want dnsmasq to serve MX records. # Return an MX record named \"maildomain.com\" with target # servermachine.com and preference 50 #mx-host=maildomain.com,servermachine.com,50 # Set the default target for MX records created using the localmx option. #mx-target=servermachine.com # Return an MX record pointing to the mx-target for all local # machines. #localmx # Return an MX record pointing to itself for all local machines. #selfmx # Change the following lines if you want dnsmasq to serve SRV # records. These are useful if you want to serve ldap requests for # Active Directory and other windows-originated DNS requests. # See RFC 2782. # You may add multiple srv-host lines. # The fields are ,,,, # If the domain part if missing from the name (so that is just has the # service and protocol sections) then the domain given by the domain= # config option is used. (Note that expand-hosts does not need to be # set for this to work.) # A SRV record sending LDAP for the example.com domain to # ldapserver.example.com port 389 #srv-host=_ldap._tcp.example.com,ldapserver.example.com,389 # A SRV record sending LDAP for the example.com domain to # ldapserver.example.com port 389 (using domain=) #domain=example.com #srv-host=_ldap._tcp,ldapserver.example.com,389 # Two SRV records for LDAP, each with different priorities #srv-host=_ldap._tcp.example.com,ldapserver.example.com,389,1 #srv-host=_ldap._tcp.example.com,ldapserver.example.com,389,2 # A SRV record indicating that there is no LDAP server for the domain # example.com #srv-host=_ldap._tcp.example.com # The following line shows how to make dnsmasq serve an arbitrary PTR # record. This is useful for DNS-SD. (Note that the # domain-name expansion done for SRV records _does_not # occur for PTR records.) #ptr-record=_http._tcp.dns-sd-services,\"New Employee Page._http._tcp.dns-sd-services\" # Change the following lines to enable dnsmasq to serve TXT records. # These are used for things like SPF and zeroconf. (Note that the # domain-name expansion done for SRV records _does_not # occur for TXT records.) #Example SPF. #txt-record=example.com,\"v=spf1 a -all\" #Example zeroconf #txt-record=_http._tcp.example.com,name=value,paper=A4 # Provide an alias for a \"local\" DNS name. Note that this _only_ works # for targets which are names from DHCP or /etc/hosts. Give host # \"bert\" another name, bertrand #cname=bertand,bert # For debugging purposes, log each DNS query as it passes through # dnsmasq. #log-queries # Log lots of extra information about DHCP transactions. #log-dhcp # Include another lot of configuration options. #conf-file=/etc/dnsmasq.more.conf #conf-dir=/etc/dnsmasq.d # Include all the files in a directory except those ending in .bak #conf-dir=/etc/dnsmasq.d,.bak # Include all files in a directory which end in .conf conf-dir=/etc/dnsmasq.d/,*.conf # If a DHCP client claims that its name is \"wpad\", ignore that. # This fixes a security hole. see CERT Vulnerability VU#598349 #dhcp-name-match=set:wpad-ignore,wpad #dhcp-ignore-names=tag:wpad-ignore "},"software/lamp.html":{"url":"software/lamp.html","title":"LAMP - yum 安装","keywords":"","body":" Linux环境下LAMP环境yum安装 替换yum源 使用remi的源来安装php7.3，首先添加源： yum install epel-release rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm 添加MariaDByum源 # MariaDB 10.4 CentOS repository list - created 2019-08-13 15:54 UTC # http://downloads.mariadb.org/mariadb/repositories/ [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.4/centos7-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 替换USTC源： sudo sed -i 's#yum\\.mariadb\\.org#mirrors.ustc.edu.cn/mariadb/yum#' /etc/yum.repos.d/mariadb # 建议使用 HTTPS sudo sed -i 's#http://mirrors\\.ustc\\.edu\\.cn#https://mirrors.ustc.edu.cn#g' /etc/yum.repos.d/mariadb 安装Apache yum install -y httpd httpd-devel 安装MariaDB sudo yum install MariaDB-server MariaDB-client 安装php模块： yum --enablerepo=remi install php73-php php73-php-pear php73-php-bcmath \\ php73-php-pecl-jsond-devel php73-php-mysqlnd php73-php-gd php73-php-common \\ php73-php-fpm php73-php-intl php73-php-cli php73-php php73-php-xml \\ php73-php-opcache php73-php-pecl-apcu php73-php-pdo php73-php-gmp \\ php73-php-process php73-php-pecl-imagick php73-php-devel php73-php-mbstring \\ php73-php-zip php73-php-ldap php73-php-imap php73-php-pecl-mcrypt 运行版本 运行并查看版本， 重启命令， 添加自动启动，链接php文件 php73 -v # ln -s /opt/remi/php73/root/usr/bin/php /usr/bin/php # 可不用链接 修改配置文件: apache: vim /etc/httpd/conf/httpd.conf # 找到 AddType application/x-gzip .gz .tgz (大概在284行) 添加如下： AddType application/x-httpd-php .php .phtml 相关配置文件：# The current PHP memory limit is below the recommended value of 512MB. vi /etc/opt/remi/php73/php.ini memory_limit = 512M 启动服务 systemctl restart httpd.service mariadb.service # php73-php-fpm.service 卸载软件 yum remove php73-php* 连接 nginx 配置 修改PHP文件 # vim /etc/opt/remi/php73/php-fpm.d/www.conf # 修改： # 因为是通过 nfs 共享配置文件与 html，所以需要 用户名/用户组、UID/GID 保持一致，日常配置则不需要。 user = apache group = apache # 修改监听端口：若上层有多个代理 nginx/apache 则填写 0.0.0.0，否则填写本机地址或回环网卡地址。 listen = 0.0.0.0:9000 # 取消 listen.owner 注释，因为远程 nginx/apache 会通过 9000 端口访问 PHP 服务器，而此时 PHP 服务器没有那个用户，所以 nginx 将以 nobody 用户访问。 listen.owner = nobody listen.group = nobody listen.mode = 0660 # 修改允许访问的客户端：多个主机用逗号分隔，注意不要填写自己的地址，不然远程地址无法访问。 listen.allowed_clients = 192.168.0.95,192.168.0.88,192.168.0.33 # 其他保持默认即可 重启php： bash systemctl restart php73-php-fpm.service 修改 nginx 配置文件 # vim /etc/nginx/nginx.conf # 修改运行用户： user nginx; # 注释 server 块内容，在 conf.d 目录中新建文件。(可扩展) # server { # listen 80 default_server; # listen [::]:80 default_server; # server_name _; # root /usr/share/nginx/html; # # # Load configuration files for the default server block. # include /etc/nginx/default.d/*.conf; # # location / { # } # # error_page 404 /404.html; # location = /40x.html { # } # # error_page 500 502 503 504 /50x.html; # location = /50x.html { # } # } # vim /etc/nginx/conf.d/front.conf # 添加以下内容块： server { listen 80; server_name _; access_log /var/log/nginx/php.access.log main; location / { root /var/www/html; index index.php index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } location ~ \\.php$ { root /var/www/html; fastcgi_pass fpm; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; include fastcgi_params; } } # vim /etc/nginx/fastcgi_params # 不知道会不会与 server 内的 fastcgi_garam 冲突； fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # vim /etc/nginx/conf.d/upstream.conf # 添加 upstream fpm { ip_hash; # 负载模式 server 192.168.0.120:9000; # PHP 服务器 server 192.168.0.64:9000; server 192.168.0.135:9000; } 重启 nginx： bash systemctl restart nginx "},"software/apacheTomcat.html":{"url":"software/apacheTomcat.html","title":"apache + Tomcat","keywords":"","body":" Tomcat环境安装及与apache整合 安装Java与apache 安装 yum install -y java-1.8.0-openjdk-devel.x86_64 \\ java-1.8.0-openjdk.x86_64 \\ httpd httpd-devel 配置Java环境变量 export JAVA_HOME=/usr/lib/jvm/java-latest export JRE_HOME=$JAVA_HOME/jre export JAVA_BIN=$JAVA_HOME/bin export JAVA_LIB=$JAVA_HOME/lib export CLASSPATH=.:$JAVA_LIB/tools.jar:$JAVA_LIB/dt.jar export PATH=$JAVA_BIN:$PATH 安装完毕后，运行java -version 将输出如下内容： [root@localhost temp]# java -version openjdk version \"1.8.0_222\" OpenJDK Runtime Environment (build 1.8.0_222-b10) OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)】 [root@localhost temp]# httpd -v Server version: Apache/2.4.6 (CentOS) Server built: Jul 29 2019 17:18:49 下载Tomcat 及连接器 tomcat 版本：8.5.43，可以去官网下载最新版本的 tomcat 8.5.x 。 wge http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.43/bin/apache-tomcat-8.5.43.tar.gz jk_mod 版本：1.2.46 可以去官网下载最新版本的 Tomcat Connectors JK 1.2 wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.46-src.tar.gz yum install -y gcc gcc* gcc-c++ ntp make imake cmake automake autoconf # 确认是否安装 gcc tar zxf tomcat-connectors-1.2.46-src.tar.gz mv tomcat-connectors-1.2.46-src jk cd jk/apache2.0 & ./configure --with-apxs=/usr/bin/apxs # 先确认apxs是否在那个目录中，如果没有就安装 httpd-devel make cp jk/conf/* /etc/httpd/conf.d 添加Tomcat用户 useradd -m -U -d /home/tomcat -s /bin/false tomcat 安装 tomcat 连接器 首先确认 httpd httpd-devel 与 tomcat 都已经安装完成，然后进行mod_jk的安装 tar -zxf tomcat-connectors-1.2.42-src.tar.gz -C jk cd jk/native/ ./configure --with-apxs=/usr/bin/apxs # 如果找不到这个命令则需要安装 httpd-devel make # 记得安装gcc cp ./apache-2.0/mod_jk.so /etc/httpd/modules/ # 把编译好的mod_jk.so拷贝到自己httpd的modules目录下 修改Tomcat目录权限 将目录所有权更改为tomcat：tomcat： chown -R tomcat:tomcat /tomcat 为bin目录添加可执行权限 chmod +x /tomcat/latest/bin/*.sh Tomcat 8.5经常更新，可以创建软连接tomcat-latest指向Tomcat目录 创建systemd unit 文件 可以更方便的管理Tomcat进程 # vim /etc/systemd/system/tomcat.service [Unit] Description=Tomcat 8.5 servlet container After=network.target [Service] Type=forking User=tomcat Group=tomcat Environment=\"JAVA_HOME=/usr/lib/jvm/java-latest\" Environment=\"JAVA_OPTS=-Djava.security.egd=file:///dev/urandom\" Environment=\"CATALINA_BASE=/tomcat/latest\" Environment=\"CATALINA_HOME=/tomcat/latest\" Environment=\"CATALINA_PID=/tomcat/temp/tomcat.pid\" Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\" ExecStart=/tomcat/latest/bin/startup.sh # 注意更改路径，一般出错都是路径配置不对 ExecStop=/tomcat/latest/bin/shutdown.sh # 注意更改路径，一般出错都是路径配置不对 [Install] WantedBy=multi-user.target 重启 systemd 服务 重启 systemd 并通过执行以下命令启动Tomcat、apache服务： systemctl daemon-reload systemctl restart tomcat httpd 检查服务状态 systemctl status tomcat # 检查服务状态是因为即使启动失败也不会报错 systemctl enable tomcat # 如果没出错可以设置成开机启动 systemctl enable --now tomcat httpd # 也可以这样写：设置开机自启并启动服务 如果启动失败 tomcat.service 路径不对 tomcat 目录权限没改 tomcat bin目录没加执行权限 关闭防火墙 彻底关闭 systemctl stop firewalld.service 放行 firewall-cmd --zone=public --permanent --add-port=8080/tcp firewall-cmd --reload 配置 Tomcat 管理界面 要添加一个能够访问tomcat web界面的新用户（manager-gui和admin-gui），需要在 tomcat-users.xml 文件中定义用户，如下所示： 修改 tomcat-users.xml 文件 ...区域 --> 修改 manager.xml 文件 保存退出并重启: systemctl restart tomcat 修改mod_JK配置以连接apache JK最关键的四个文件分别是： httpd.conf：Apache 服务器的配置文件，用来加载JK模块以及指定JK配置文件信息 httpd-jk.conf： 是 module/mod_jk.so 模块的配置文件,用来通知 apache 将哪些文件转发至 tomcat 来处理 worker.properties： tomcat 服务器的连接文件 uriworkermap.properties：URL映射文件，用来指定哪些URL由tomcat处理，也可以指定哪些URL不让tomcat处理，取反用!号。 httpd.conf # vim /etc/httpd/conf/httpd.conf 修改 ServerName ： worker.properties Apache+JK+Tomcat负载平衡配置一文说明了jk_mod分发请求类型 # vim /etc/httpd/conf.d/tomcat/worker.properties worker.list=connect,jk-status,tomcat1 # tomcat 名称，后面的httpd-jk.conf、uriworkermap.properties、server.xml需要一致或存在此列表 worker.tomcat1.type=ajp13 # 使用的协议：AJP/13 worker.tomcat1.host=192.168.0.50 # tomcat地址 worker.tomcat1.port=8009 # tomcat端口 worker.tomcat1.lbfactor=1 # 服务器权重 #=========controller========== # 负载均衡器 # worker.controller.type=lb # 采用类型为 lb 负载均衡类型 # worker.connect.balanced_workers=tomcat1 # 指定负载列表，逗号分隔 # worker.connect.sticky_session=false # 此处指定集群是否需要会话复制，如果设为true，则表明会话粘性，不进行会话复制，当某用户的请求第一次分发到哪一 tomcat 后， # 后续的请求会一直分发到此台 tomcat 服务器上处理；如果设为 false ，则表明需要会话复制。 worker.connect.sticky_session_force=1 # 这样负载均衡器lb 就会尽量保持一个session，也就是使用户在一次会话中跟同一个 tomcat 进行交互 #===========status============ worker.status.type=status # 用于 httpd 自身状态监控的 status httpd-jk.conf # vim /etc/httpd/conf.d/httpd-jk.conf LoadModule jk_module modules/mod_jk.so # 全局只需加载/写一次 JkWorkersFile conf.d/tomcat/workers.properties # 指明 worker 的配置文件 JkLogFile logs/mod_jk.log # 日志路径 JkLogLevel info # 日志记录级别 JkShmFile logs/mod_jk.shm # 共享内存文件 JkMount /tomcat/webapps/power/*.jsp tomcat1 # 哪些目录下的文件需要被哪个tomcat转发 uriworkermap.properties 追加如下行： # vim /etc/httpd/conf.d/tomcat/uriworkermap.properties !/*=connect !/*.gif=tomcat1 # 将以 .gif 结尾的文件 不转发 至 tomcat 处理 !/*.jpg=tomcat1 # 去掉 ！ 号，将由 tomcat 来处理 !/*.png=tomcat1 !/*.css=tomcat1 !/*.js=tomcat1 !/*.htm=tomcat1 !/*.html=tomcat1 server.xml 在tomcat中配置 jvmRoute，与 workers.properties 中指名的 worker 对应 systemctl restart httpd tomcat 相关文档/资料 Apache+JK+Tomcat负载平衡配置 关于 Include conf/mod_jk.confd 的说明 Apache通过mod_jk整合Tomcat Apache+Tomcat配置转发 workers.properties 相关博客 Tomcat 并部署web应用 ( 三种方式 ) workers.properties 官方文档 How to install Tomcat 8.5 on CentOS 7 关于访问资源500的说明 Tomcat上的网站显示500错误 通过mod_jk实现apache与tomcat整合 "},"software/nfsforcentos7.html":{"url":"software/nfsforcentos7.html","title":"NFS 在 centOS7 下 yum 安装","keywords":"","body":" CentOS 7 下 yum 安装和配置 NFS 简介 NFS 是 Network File System 的缩写，即网络文件系统。功能是让客户端通过网络访问不同主机上磁盘里的数据，主要用在类Unix系统上实现文件共享的一种方法。 本例演示 CentOS 7 下安装和配置 NFS 的基本步骤。 环境说明 CentOS 7（Minimal Install） $ cat /etc/redhat-release CentOS Linux release 7.5.1804 (Core) 根据官网说明 Chapter 8. Network File System (NFS) - Red Hat Customer Portal，CentOS 7.4 以后，支持 NFS v4.2 不需要 rpcbind 了，但是如果客户端只支持 NFC v3 则需要 rpcbind 这个服务。 服务端 服务端安装 使用 yum 安装 NFS 安装包。 yum install nfs-utils 注意：只安装 nfs-utils 即可，rpcbind 属于它的依赖，也会安装上。 服务端配置 设置 NFS 服务开机自启并启动 $ sudo systemctl enable --now rpcbind $ sudo systemctl enable --now nfs 防火墙需要打开 rpc-bind 和 nfs 的服务 $ sudo firewall-cmd --zone=public --permanent --add-service=rpc-bind success $ sudo firewall-cmd --zone=public --permanent --add-service=mountd success $ sudo firewall-cmd --zone=public --permanent --add-service=nfs success $ sudo firewall-cmd --reload success 配置共享目录 服务启动之后，在服务端配置共享目录 mkdir /data chmod 755 /data 根据这个目录，相应配置导出目录 vi /etc/exports 添加如下配置 # vim /etc/exports /data/ 192.168.0.0/24(rw,sync,no_root_squash,no_all_squash) /data: 共享目录位置。 192.168.0.0/24: 客户端 IP 范围，* 代表所有，即没有限制。 rw: 权限设置，可读可写。 sync: 同步共享目录。 no_root_squash: 可以使用 root 授权。 no_all_squash: 可以使用普通用户授权。 :wq 保存设置之后，重启 NFS 服务。 # 192.168.0.0/24 可以为一个网段，一个IP，也可以是域名，域名支持通配符 如: *.com # rw：read-write，可读写； # ro：read-only，只读； # sync：文件同时写入硬盘和内存； # async：文件暂存于内存，而不是直接写入内存； # no_root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。显然开启这项是不安全的。 # root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，拥有匿名用户权限，通常他将使用nobody或nfsnobody身份； # all_squash：不论NFS客户端连接服务端时使用什么用户，对服务端分享的目录来说都是拥有匿名用户权限； # anonuid：匿名用户的UID值 # anongid：匿名用户的GID值。备注：其中anonuid=1000,anongid=1000,为此目录用户web的ID号,达到连接NFS用户权限一致。 # defaults 使用默认的选项。默认选项为rw、suid、dev、exec、auto nouser与async。 # atime 每次存取都更新inode的存取时间，默认设置，取消选项为noatime。 # noatime 每次存取时不更新inode的存取时间。 # dev 可读文件系统上的字符或块设备，取消选项为nodev。 # nodev 不读文件系统上的字符或块设备。 # exec 可执行二进制文件，取消选项为noexec。 # noexec 无法执行二进制文件。 # auto 必须在/etc/fstab文件中指定此选项。执行-a参数时，会加载设置为auto的设备，取消选取为noauto。 # noauto 无法使用auto加载。 # suid 启动set-user-identifier设置用户ID与set-group-identifer设置组ID设置位，取消选项为nosuid。 # nosuid 关闭set-user-identifier设置用户ID与set-group-identifer设置组ID设置位。 # user 普通用户可以执行加载操作。 # nouser 普通用户无法执行加载操作，默认设置。 # remount 重新加载设备。通常用于改变设备的设置状态。 # rsize 读取数据缓冲大小，默认设置1024。–影响性能 # wsize 写入数据缓冲大小，默认设置1024。 # fg 以前台形式执行挂载操作，默认设置。在挂载失败时会影响正常操作响应。 # bg 以后台形式执行挂载操作。 # hard 硬式挂载，默认设置。如果与服务器通讯失败，让试图访问它的操作被阻塞，直到服务器恢复为止。 # soft 软式挂载。服务器通讯失败，让试图访问它的操作失败，返回一条出错消息。这项功能对于避免进程挂在无关紧要的安装操作上来说非常有用。 # retrans=n 指定在以软方式安装的文件系统上，在返回一条出错消息之前重复发出请求的次数。 # nointr 不允许用户中断，默认设置。 # intr 允许用户中断被阻塞的操作并且让它们返回一条出错消息。 # timeo=n 设置请求的超时时间以十分之一秒为单位。 # tcp 传输默认使用udp,可能出现不稳定，使用proto=tcp更改传输协议。客户端参考mountproto=netid # （以上内容：参考：man nfs） 重启服务 systemctl restart nfs 检查本地共享目录showmount -e localhost Export list for localhost: /data 192.168.0.0/24 修改服务端目录权限 由于 NFS 同步文件时只能同步文件的用户 uid 而无法同步用户名，所以所有用户 UID 需要保持一致，否则会因为权限问题而无法访问。 # 创建 nginx 用户且不能登录。false==nologin useradd -m -U -d /home/nginx -s /bin/false nginx # 修改用户 UID usermod -u 666 nginx # 修改用户 GID groupmod -g 6666 nginx # 拒绝系统用户登录，可以将其shell设置为/usr/sbin/nologin或者/bin/false usermod -s | --shell /usr/sbin/nologin nginx # or {nologin会礼貌的向用户显示一条信息，并拒绝用户登录，信息在/etc/} usermod -s | -shell /bin/false nginx # 锁定用户账户 passwd -l | --lock username # 解锁用户账户 passwd -u | --unlock username # 删除用户密码 passwd -d | --delete username # /etc/nologin： # 如果存在/etc/nologin文件，则系统只允许root用户登录，其他用户全部被拒绝登录，并向他们显示/etc/nologin文件的内容。 这样，服务端就配置好了，接下来配置客户端，连接服务端，使用共享目录。 详细的用户操作命令 客户端 客户端安装 与服务端类似yum install nfs-utils 客户端配置 设置 rpcbind 服务的开机自启并启动systemctl enable --now rpcbind 注意：客户端不需要打开防火墙，因为客户端时发出请求方，网络能连接到服务端即可。 客户端也不需要开启 NFS 服务，因为不共享目录。 客户端连接 NFS 先查服务端的共享目录[root@nginx-node-1 mnt]# showmount -e 192.168.0.199 Export list for 192.168.0.199: /mnt 192.168.0.0/24 在客户端挂载 NFS mount -t nfs -o sync 192.168.0.199:/src /dest # 注意：如果没有 -o sync 选项，则会造成在 nfs 服务端修改文件，客户端无法及时同步的问题。 # -o 选项：[default:async]/sync 异步写入/同步写入磁盘。 # defauts 默认值：rw,suid,dev,exec,auto,async,nouser。 # 写入 fstab 文件实现开机挂载 # vim /etc/fstab # 192.168.0.199:/mnt/www/html /var/www/html nfs rw,suid,dev,exec,auto,sync,nouser 0 0 挂载之后，可以使用 mount 命令查看一下 [root@nginx-node-1 mnt]# mount ... ... ... 192.168.0.199:/mnt on /mnt type nfs4 (rw,relatime,vers=4.1,rsize=262144,wsize=262144,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.0.95,local_lock=none,addr=192.168.0.199) [root@nginx-node-1 mnt]# 这说明已经挂载成功了。 测试 NFS 在客户端向共享目录创建一个文件 [root@nginx-node-1 mnt]# touch www/nfs.test 之后取 NFS 服务端 192.168.0.199 查看一下 [root@nfs-node-1 mnt]# ll www/ total 0 drwxr-xr-x 2 nginx nginx 6 Aug 18 16:13 html -rw-r--r-- 1 root root 0 Aug 18 18:04 nfs.test [root@nfs-node-1 mnt]# 可以看到，共享目录已经写入了。 客户端自动挂载 自动挂载很常用，客户端设置一下即可。vim /etc/fstab 在结尾添加类似如下配置 # # /etc/fstab # Created by anaconda on Fri Aug 16 10:09:51 2019 # Accessible filesystems, by reference, are maintained under '/dev/disk' # See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info # /dev/mapper/centos-root / xfs defaults 0 0 UUID=164e49a9-51a3-4a39-871e-86c5fc5bab32 /boot xfs defaults 0 0 /dev/mapper/centos-swap swap swap defaults 0 0 192.168.0.199:/mnt /mnt nfs defaults 0 0 重新加载 systemctl 由于修改了 /etc/fstab，需要重新加载 systemctl。systemctl daemon-reload 查看挂载点[root@nginx-node-1 mnt]# mount ... ... ... 192.168.0.199:/mnt on /mnt type nfs4 (rw,relatime,vers=4.1,rsize=262144,wsize=262144,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.0.95,local_lock=none,addr=192.168.0.199) [root@nginx-node-1 mnt]# 此时已经启动好了。如果实在不放心，可以重启一下客户端的操作系统，之后再查看一下。 相关链接 Chapter 8. Network File System (NFS) - Red Hat Customer Portal Setting Up NFS Server And Client On CentOS 7 CentOS 7 下 yum 安装和配置 NFS NFS刷新（同步） "},"software/keepalived.html":{"url":"software/keepalived.html","title":"keepalived 在 centOS7 安装","keywords":"","body":" centOS 7 下 keepalived 安装与配置 keepalived 与 lvs 之间关系 LVS 全称Linux Virtual Server，也就是Linux虚拟服务器，由章文嵩（现就职于于淘宝，正因为如此才出现了后来的fullnat模式）博士发起的Load Balance开源项目，官网地址：www.linuxvirtualserver.org keepalived keepalived是Linux下一个轻量级别的高可用解决方案。高可用（High Avalilability，HA），广义上讲，是指整个系统的高可用行，狭义上来说就是主机的冗余和接管； 为什么是轻量级呢，keepalived 通过 VRRP（Vritrual Router Redundancy Protocol：虚拟路由冗余协议）实现网络不间断稳定运行；与HeartBeat RoseHA相比， HeartBeat 提供了完整的HA基本功能，比如：心跳检测，资源接管，检测集群中的服务，在集群节点转移共享ip地址所有者等等； 虽然功能强大，但是部署使用相对麻烦，而 keepalived 只需一个配置文件就可搞定。 LVS 与 keepalived 的关系：类似于 nginx&php 或 apache&php keepalived 起初是为 LVS 设计的，由于 Keepalived 可以实现对集群节点的状态检测，而 LVS 可以实现负载均衡功能。因此，keepalived 借助于第三方模块 IPVS/LVS 就可以很方便的搭建出一套负载均衡系统； # 在这里有个误区，由于 keepalived 可以和 IPVS 一起很好的工作， # 很多朋友以为 Keepalived 就是一款负载均衡软件，这种理解是错误的，他们是互补的， # keepalived 是可以直接操作配置 LVS 的！ 在 keepalived 当中 IPVS 模块是可配置的，如果需要负载均衡功能，可以在编译 keepalived 时打开负载均衡功能，也可以通过编译参数关闭。 haproxy HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。HAProxy特别适用于那些负载特大的web站点，这些站点通常又需要会话保持或七层处理。HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上。 HAProxy实现了一种事件驱动, 单一进程模型，此模型支持非常大的并发连接数。多进程或多线程模型受内存限制 、系统调度器限制以及无处不在的锁限制，很少能处理数千并发连接。事件驱动模型因为在有更好的资源和时间管理的用户空间(User-Space) 实现所有这些任务，所以没有这些问题。此模型的弊端是，在多核系统上，这些程序通常扩展性较差。这就是为什么他们必须进行优化 使每个CPU时间片(Cycle) 做更多的工作。 LVS 与 haproxy LVS只工作在4层，没有流量产生，使用范围广，对操作员的网络素质要求较高； HAproxy及支持7层也支持4层的负载均衡，更专业； 推荐模式：F5/LVS Haproxy Squid/Varnish AppServer 安装依赖项 安装 keepalived 编译依赖和 LVSyum install -y gcc openssl-devel \\ libnl libnl-devel libnfnetlink-devel \\ net-tools ipvsadm iptables-services \\ ipvsadm 安装keepalived 由于 yum 源版本过旧(1.5)，所以在官网下载源码包(2.0.13)自己构建并编译 mkdir -p /opt/install/keepalived cd /opt/install/keepalived wget http://www.keepalived.org/software/keepalived-2.0.13.tar.gz tar zxvf keepalived-2.0.13.tar.gz cd keepalived-2.0.13 ./configure --prefix=/usr/local/keepalived/ make && make install 配置自动启动 mkdir /etc/keepalived cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/keepalived 配置keepalived 注意：需要注释 #vrrp_strict，否则将会发生无法向 VIP ping通的问题，包括无法访问页面。! Configuration File for keepalived global_defs { router_id haproxy_nginx1 vrrp_skip_check_adv_addr #vrrp_strict vrrp_garp_interval 0 vrrp_gna_interval 0 } # vrrp_script check_local { # script \"/etc/keepalived/chk_haproxy.sh 192.168.0.163 200\" # interval 5 # 运行间隔 # weight -20 # 降权级别：降权后需要小于 BACKUP # fall 2 # 连续失败两次进行降权 # rise 3 # 连续成功三次恢复权限 # user keepalived # 运行脚本用户 # } # 在 check_local 定义的检测规则为： # 1. 自身web服务故障（超时，http返回状态不是200） # 2. 无法ping通网关 # 3. 产生以上任何一个问题，均应该移除本机的虚拟IP(停止keepalived实例即可) vrrp_instance VI_1 { state MASTER # 指定A节点为主节点 备用节点上设置为BACKUP即可 interface ens192 # 绑定虚拟IP的网络接口:ip ad 可以查看 virtual_router_id 51 priority 100 # 主节点的优先级（1-254之间），备用节点必须比主节点优先级低,优先级数字越大优先级越高。 advert_int 1 # 组播信息发送间隔，两个节点设置必须一样 authentication { # 设置vrrp验证信息，两个节点必须一致 auth_type PASS # 设置验证类型，主要有PASS和AH两种 auth_pass 1111 # 设置验证密码，在同一个vrrp_instance下，MASTER与BACKUP必须使用相同的密码才能正常通信 } virtual_ipaddress { 192.168.0.233/24 # 设置虚拟IP地址，可以设置多个虚拟IP地址，每行一个 } track_script { # 检查自身状态脚本 check_local } } virtual_server 192.168.0.233 80 { # 虚拟服务器端口配置 delay_loop 6 lb_algo rr lb_kind DR #persistence_timeout 50 protocol TCP real_server 192.168.0.163 80 { weight 1 TCP_CHECK { connect_timeout 5 retry 2 delay_before_retry 3 connect_port 80 } } real_server 192.168.0.111 80 { weight 1 TCP_CHECK { connect_timeout 5 retry 2 delay_before_retry 3 connect_port 80 } } } 在配置文件中没有写VIP的子网掩码，会使用默认子网掩码255.255.255.255，有可能导致无法从其它机器访问虚拟IP（keepalived虚拟IP无法ping通）所以尽量指定子网掩码/24即可。 配置 BACKUP 服务器时注意以下几点： state 角色为 BACKUP interface 为网卡的 ID，要根据机器确认 virtual_route_id 要与 MASTER 一致，默认为 51 priority 要比 MASTER 小 unicast_src_ip 要设置正确，组播地址设置之后，要注释 vrrp_strict 选项 状态检测脚本 #!/usr/bin/env bash check_ip=$1 check_http_status_code=$2 code=$(curl -Is http://${check_ip} | grep -c ${check_http_status_code}) if [[ ${code} -ne 1 ]] then exit 1 fi 关于 check_local 脚本的一个小问题，如果本机或是网关偶尔出现一次故障，那么我们不能认为是服务故障。更好的做法是如果连续 N 次检测本机服务不正常或连接 N 次无法 ping 通网关，才认为是故障产生，才需要进行故障转移。另一方面，如果脚本检测到故障产生，并停止掉了 keepalived 服务，那么当故障恢复后， keepalived 是无法自动恢复的。我觉得利用独立的脚本以秒级的间隔检查自身服务及网关连接性，再根据故障情况控制 keepalived 的运行或是停止。 启动keepalived并启用自动启动 开机自启并启动服务systemctl enable keepalived.servic systemctl start keepalived.service systemctl status keepalived.service 常见问题 无法绑定TCP 下载源码包编译安装。 不能ping 请在 vim /etc/keepalived/keepalived.conf 中注释 vrrp_strict 无法转发入站请求 请检查你的真实服务器的应用程序是否绑定到0.0.0.0 或 IPV6上 或者是否开启了 数据表转发功能： # vim /etc/sysctl.conf net.ipv4.ip_forward=1 # sysctl -p 相关链接 keepalived 官方文档 负载均衡及服务器集群 keepalived 基本使用(主备模式) 配置keepalived ping不通 解决办法 Linux下Keepalived安装与配置(主要看选项说明) CentOS 7 配置 Keepalived 实现双机热备(一篇很细致的博客) Install LVS and keepalived on CentOS7(安装时可以参照的博客) LVS+KeepAlived+Nginx高可用实现方案(较完整的配置示例) "},"software/haproxy1.8.html":{"url":"software/haproxy1.8.html","title":"HAProxy1.8 在 centOS7 下 yum 安装","keywords":"","body":" 在CentOS 7上安装 HAProxy 1.8 简介 HAProxy 提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。HAProxy 特别适用于那些负载特别大的 web 站点，这些站点通常又需要会话保持和七层处理。HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中，同时可以保护你的web服务器不被暴露在公网当中。 HAProxy 实现了一种事件驱动，单一进程模型，此模型支持非常大的并发连接数，多进程或多线程模型受内存限制、系统调度器限制以及无处不在的锁限制，很少能处理数千并发连接。事件驱动模型因为在有更好的时间和资源管理的用户端（user-space）实现所有这些任务，所以没有这些问题。此模型的弊端是，在多核系统上，此程序的扩展性通常比较差。这就是为什么他们必须进行优化以使得每个CPU时间片（Cycle）做更多的工作。 HAProxy 版本 安装 如果安装了默认的HAProxy 1.5版，则应将其删除，因为它与新版本会产生冲突 备份旧的配置文件 yum remove haproxy # 注意：需要把 /etc/haproxy/haproxy.cfg 保存为 /etc/haproxy/haproxy.cfg.rpmsave # 重命名旧的 haproxy 配置文件，有助于你是否计划在HAProxy 1.8版中使用相同的文件。 安装 centOS 软件集（SCL）存储库以访问新的 HAProxy 版本 # 注意：如果未安装 centOS 源则安装版本可能为 1.5X yum install centos-release-scl-rh 更新存储库： yum makecache 安装HAProxy 1.8 yum install rh-haproxy18-haproxy rh-haproxy18-haproxy-syspaths rh-haproxy18-haproxy-syspaths软件包是rh-haproxy18-haproxy软件包的系统级包装器，允许我们将HAProxy 1.8作为服务运行。此程序包与HAProxy冲突，无法在一个系统上安装。 查看 /etc/haproxy/haproxy.cfg，将看到的新包的简单配置 ls -l /etc/haproxy/ # lrwxrwxrwx. 1 root root 44 Jul 17 18:19 haproxy.cfg -> /etc/opt/rh/rh-haproxy18/haproxy/haproxy.cfg 设置haproxy开机自启并启动服务 systemctl enable --now rh-haproxy18-haproxy systemctl status rh-haproxy18-haproxy # 记得查看启动状态 配置 配置文件格式 HAProxy 配置处理3类主要参数来源 最优先处理的命令行参数 配置文件中 \"global\" 配置段，用于设定全局配置参数 配置文件中 \"proxy\" 相关配置段，如“defaults”，“listen”，“frontend”和“backend” 配置文件中分成五部分内容，分别如下 global：参数是进程级的，通常是和操作系统相关。这些参数一般只设置一次，如果配置无误，就不需要再次进行修改； defaults：配置默认参数，这些参数可以被用到frontend，backend，Listen组件； frontend：接收请求的前端虚拟节点，Frontend可以更加规则直接指定具体使用后端的backend； backend：后端服务集群的配置，是真实服务器，一个Backend对应一个或者多个实体服务器； Listen Fronted和backend的组合体。 配置文件基础语法 haproxy配置文件引入了引号和转义符：反斜线表示转义符；单引号表示强引用；双引号表示弱引用。如果字符串内需要输入空格，则空格需要进行转义或者通过引号包围，不转义时在配置文件中表示分隔符1. \\ # 标记一个空白字符以区分它的本义和用作分隔符时的空白符 2. \\# # to mark a hash and differentiate it from a comment 3. \\\\ # 使用反斜杠 4. \\' # 使用单引号并将其与强引用区分开来 5. \\\" # 使用双引号并将其与弱引用区分开来 在配置文件中，一些包含了数值的参数表示时间，如timeout。这些值默认以毫秒为单位，但也可以使用其它的时间单位后缀。1. us: 微秒(microseconds)，即1/1000000秒； 2. ms: 毫秒(milliseconds)，即1/1000秒； 3. s: 秒(seconds)； 4. m: 分钟(minutes)； 5. h：小时(hours)； 6. d: 天(days)； 配置文件内容 抛去不建议设置的项后，内容大致如下：这也是yum安装haproxy时默认提供的配置 global daemon log 127.0.0.1 local2 chroot /var/lib/haproxy pidfile /var/run/haproxy.pid maxconn 4000 user haproxy group haproxy stats socket /var/lib/haproxy/stats fronrend http-in bind *:80 default-backend servers backend servers server server1 127.0.0.1:8080 maxconn 32 # 注意上面配置了使用local2记录log，因此还需去rsyslogd的配置文件中添加该设备以及记录的日志位置。如下 # cat >/etc/rsyslog.conf # local2.* /var/log/haproxy.log # eof 完整配置与选项：更多参见官方文档 global # 全局参数的设置 log 127.0.0.1 local0 info # log语法：log [max_level_1] # 全局的日志配置，使用log关键字，指定使用127.0.0.1上的syslog服务中的local0日志设备，记录日志等级为info的日志 user haproxy group haproxy # 设置运行haproxy的用户和组，也可使用uid，gid关键字替代之 daemon # 以守护进程的方式运行于后台，等同于命令行的\"-D\"选项，当然，也可以在命令行中以\"-db\"选项将其禁用；(建议设置项) nbproc 16 # 设置haproxy启动时的进程数，根据官方文档的解释，我将其理解为：该值的设置应该和服务器的CPU核心数一致，即常见的2颗8核心CPU的服务器，即共有16核心，则可以将其值设置为： 相关链接 haproxy配置文件详解和ACL功能 官方文档 "},"software/perconaCluster.html":{"url":"software/perconaCluster.html","title":"Percona 搭建高可用的 MySQL 数据库","keywords":"","body":" 使用 Percona 搭建高可用的 MySQL 数据库 简介 Percona是一个公司的名称，主要做 MySQL 的二次开发 他的集群解决方案叫Percona XtraDB Cluster，简称PXC 他的备份解决方案叫Percona XtraBackup 架构图 虚线是模拟右侧proxy宕机的情景，红色的虚IP会飘到左边的proxy上 application一律使用域名访问数据库，由DNS服务器解析到红黄两个虚拟IP上 由于三个数据库都是可读写的，所以代理到哪个服务器都可以 版本 PXC：5.7 CentOS：7.6 Percona安装与配置 在三台主机上配置yum源 yum -y install http://www.percona.com/downloads/percona-release/redhat/0.1-6/percona-release-0.1-6.noarch.rpm # 安装yum源 sed -i 's$http://repo.percona.com/percona$https://mirrors.ustc.edu.cn/percona$g' # 替换国内源 sed -i 's$gpgcheck = 1$gpgcheck = 0$g' # 关闭秘钥校验 更新过yum源后，会在 /etc/yum.repos.d/ 下生成 percona-release.repo 关闭 selinux 和 Firewalls setenforce 0 systemctl stop firewalls.service 卸载 MySQL/MariaDB 由于 Percona-XtraDB-Cluster-shared-57-5.7.23-31.31.1.el7.x86_64.rpm 有一个冲突： error: Failed dependencies: mariadb-libs >= 5.5.37 is obsoleted by Percona-XtraDB-Cluster-shared-57-5.7.23-31.31.1.el7.x86_64 systemctl stop mariadb/mysql # 停止MySQL/MariaDB yum remove mariadb-libs # 卸载lib库 yum remove mariadb-libs mariadb-service mariadb-client # 卸载 MariaDB 安装 yum -y install Percona-XtraDB-Cluster-57 查看密码 systemctl start mysql # 数据库不建议开机启动 grep 'temporary password' /var/log/mysqld.log 连接数据库 mysql -u root -p 添加 root 用户远程的访问权限 mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'admin'; Query OK, 0 rows affected (0.01 sec) mysql> GRANT ALL PRIVILEGES ON *.* TO root@\"192.168.0.%\" IDENTIFIED BY \"admin\"; Query OK, 0 rows affected, 1 warning (0.01 sec) 添加SST用户 mysql> CREATE USER 'sstuser'@'localhost' IDENTIFIED BY 'mysql'; Query OK, 0 rows affected (0.00 sec) /*只允许本地登录*/ mysql> GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO 'sstuser'@'localhost'; Query OK, 0 rows affected (0.00 sec) /*设置sstuser 用户权限*/ mysql> FLUSH PRIVILEGES; /*刷新权限*/ Query OK, 0 rows affected (0.01 sec) 停止服务，修改配置文件 systemctl stop mysql 首先修改 /etc/percona-xtradb-cluster.conf.d/wsrep.cnf # vim /etc/percona-xtradb-cluster.conf.d/wsrep.cnf [mysqld] # Path to Galera library wsrep_provider=/usr/lib64/galera3/libgalera_smm.so # Cluster connection URL contains IPs of nodes #If no IP is found, this implies that a new cluster needs to be created, #in order to do that you need to bootstrap this node # 群集连接URL包含节点的IP如果未找到IP，则表示需要创建新群集，为此，您需要引导此节点 # {这里可以写域名或者IP地址，第一个ip为主节点,cluster内需保持一致} wsrep_cluster_address=gcomm://192.168.0.157,192.168.0.109,192.168.0.54 # In order for Galera to work correctly binlog format should be ROW # 为了让Galera正常工作，binlog格式应该是ROW binlog_format=ROW # MyISAM storage engine has only experimental support # MyISAM 存储引擎只有实验环境支持：InnoDB、MyIsam、、Memory、Mrg_Myisam、Blackhole default_storage_engine=InnoDB # Slave thread to use # slave 节点线程 wsrep_slave_threads= 8 wsrep_log_conflicts # This changes how InnoDB autoincrement locks are managed and is a requirement for Galera # 这改变了InnoDB自动增量锁的管理方式，是Galera的要求 innodb_autoinc_lock_mode=2 # Node IP address # 节点 IP 地址 # {这个可以写可以不写} wsrep_node_address=10.210.149.25 # Cluster name # cluster 名称：其他节点需保持一致 wsrep_cluster_name=pxc-cluster #If wsrep_node_name is not specified, then system hostname will be used # 如果未指定wsrep_node_name，则将使用系统主机名 # 子节点名称：需在 cluster 中保持唯一 wsrep_node_name=pxc-cluster-node-10-210-149-25 #pxc_strict_mode allowed values: DISABLED,PERMISSIVE,ENFORCING,MASTER # pxc 严格模式 允许的值：DISABLED,PERMISSIVE,ENFORCING,MASTER pxc_strict_mode=ENFORCING # SST method # sst 用户 备份/传输模式：XtraBackup-v2 wsrep_sst_method=xtrabackup-v2 #这项一定要写 # sst 用户验证： #Authentication for SST method wsrep_sst_auth=\"sstuser:mysql\" 启动主节点 systemctl start mysql@bootstrap.service 在其他节点上修改/etc/percona-xtradb-cluster.conf.d/wsrep.cnf 在其他结点上修改/etc/percona-xtradb-cluster.conf.d/mysqld.cnf # vim /etc/percona-xtradb-cluster.conf.d/mysqld.cnf # 节点1 [mysqld] server-id=2 # 节点2 [mysqld] server-id=3 在其他上启动mysql systemctl start mysql 随便找一个节点检查集群情况 mysql> show status like 'wsrep_cluster_size'; mysql> show status like 'wsrep_cluster%'; 主节点down掉后加入 cluster systemctl start mysql 注意：如果cluster已经启动，主节点down机想重新加入这个集群，直接启动mysql即可 如果这个集群中最后的节点也down机了，在任何一个节点都可以启动集群，重新启动集群需要执行 systemctl start mysql@bootstrap.service 然后在其他节点执行 systemctl start mysql Proxy安装与配置 可以选用nginx/lvs/haproxy任何一种，不过他们的原理不太一样Nginx和haprxoy是代理，LVS是转发 Haproxy的配置看这个：使用percona搭建高可用的MySQL数据库 Nginx的高可用配置看这个：Keepalive + Nginx高可用 链接地址 PXC - 官方文档 导入无主键表错误:prohibits use of DML command on a table "},"zabbix/nginx.html":{"url":"zabbix/nginx.html","title":"nginx","keywords":"","body":" zabbix 监控 nginx 如果需要监控不同的则需要开启不同的状态检测页(具有差异性配置文件)，也许通过 tengine 的 nginx_upstream_check_module 模块可以解决这个问题。 修改配置文件 配置文件组成 default.conf # nginx 配置 nginx_status.sh # 探测 nginx 状态 zabbix_agentd.conf # zabbix-agent 配置文件 userparameter_nginx.conf # 定义 zabbix-agent 键值，命名规则为：userparameter_{监控的服务或其他}.conf zbx_export_templates.xml # zabbix 监控模板，多数为 2.X、3.X 且在 zabbix4.X 上不适用。 修改 zabbix-agent 配置文件 以下为 zabbix-agent 必填项： # vim /etc/zabbix/zabbix_agentd.conf # [root@nginx-node-2 zabbix]# egrep -v \"(^$|^#)\" /etc/zabbix/zabbix_agentd.conf # PidFile=/var/run/zabbix/zabbix_agentd.pid # LogFile=/var/log/zabbix/zabbix_agentd.log # LogFileSize=1 # 限制 zabbix-agent 日志大小 # Server=192.168.0.74 # 指定 zabbix-server 地址 # ServerActive=192.168.0.74 # 检查 zabbix-server 活动情况，默认为 disabled，设置主动推送信息时必须填写 # Hostname=nginx-node-2 # 指定本机 hostname，设置主动推送信息时必须填写 # Include=/etc/zabbix/zabbix_agentd.d/*.conf nginx： 开启 nginx 状态检测页： # vim /etc/nginx/conf.d/front.conf server { listen 80; server_name _; access_log /var/log/nginx/php.access.log main; # 每次访问的配置文件(应该写在default.conf里) location / { root /var/www/html; index index.php index.html index.htm; } location /stub_status-2 { # nginx 监控页面 stub_status on; # 启用 nginx 状态检测 access_log off; # 禁用访问日志 allow 192.168.0.0/24; # 允许访问的 IP 段 deny all; # 拒绝其他地址连接 } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } location ~ \\.php$ { root /var/www/html; fastcgi_pass fpm; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; include fastcgi_params; } } nginx_status.sh nginx 状态检查脚本 # vim /etc/zabbix/zabbix_agentd.d/nginx.sh #!/bin/bash HOST=\"192.168.0.95\" PORT=\"80\" stub_status=stub_status-2 function check() { # 检测 nginx 进程是否存活 if [ -f /sbin/pidof ]; then # 查看某个程序是否存在/是多少 /sbin/pidof nginx | wc -w # 查看 nginx 有多少进程 else # 如果查不到 ps ax | grep \"nginx:\" | grep -v grep | wc -l # 在所有进程中查看nginx进程与数量 fi } function active() { # 检查活动连接数量 /usr/bin/curl -s \"http://$HOST:$PORT/${stub_status}/\" 2>/dev/null| grep 'Active' | awk '{print $NF}' } function accepts() { # 总共处理的连接 /usr/bin/curl -s \"http://$HOST:$PORT/${stub_status}/\" 2>/dev/null| awk NR==3 | awk '{print $1}' } function handled() { # 成功创建握手次数 /usr/bin/curl -s \"http://$HOST:$PORT/${stub_status}/\" 2>/dev/null| awk NR==3 | awk '{print $2}' } function requests() { # 总共处理的请求 /usr/bin/curl -s \"http://$HOST:$PORT/${stub_status}/\" 2>/dev/null| awk NR==3 | awk '{print $3}' } function reading() { # Nginx 读取到客户端的Header信息数 /usr/bin/curl -s \"http://$HOST:$PORT/${stub_status}/\" 2>/dev/null| grep 'Reading' | awk '{print $2}' } function writing() { # Nginx 返回给客户端的Header信息数 /usr/bin/curl -s \"http://$HOST:$PORT/${stub_status}/\" 2>/dev/null| grep 'Writing' | awk '{print $4}' } function waiting() { # Nginx已经处理完成的信息数： 开启keep-alive的情况下,这个值等于 active – (reading + writing) /usr/bin/curl -s \"http://$HOST:$PORT/${stub_status}/\" 2>/dev/null| grep 'Waiting' | awk '{print $6}' } case \"$1\" in check) check;; active) active;; accepts) accepts;; handled) handled;; requests) requests;; reading) reading;; writing) writing;; waiting) waiting;; *) echo $\"Usage $0 {check|active|accepts|handled|requests|reading|writing|waiting}\" exit esac zabbix_agent.conf [root@php-node-1 zabbix]# egrep -v \"(^$|^#|;)\" zabbix_agentd.conf PidFile=/var/run/zabbix/zabbix_agentd.pid LogFile=/var/log/zabbix/zabbix_agentd.log LogFileSize=1 # 限制 zabbix-agent 日志大小1M Server=192.168.0.74 # zabbix 服务端IP ServerActive=192.168.0.74 # 检测活动的 zabbix 服务端：设置主动模式时必填项 Hostname=nginx-node-1 # 设置主机名(本地hostname)：设置主动模式时必填项 Include=/etc/zabbix/zabbix_agentd.d/*.conf userparameter_nginx.conf zabbix-agent 的键值定义文件 UserParameter=nginx.status[*],/etc/zabbix/scripts/nginx.sh $1 被监控端只有这三个主要文件需要修改：服务状态页、服务监控脚本、zabbix-agent键值定义文件。 重启服务 nginxsystemctl restart nginx zabbix-agentsystemctl restart zabbix-agent 在 zabbix-get 中验证脚本 zabbix-agent yum install -y zabbix-get zabbix_get -s 192.168.0.95 -k 'nginx.status[active]' # 在服务端运行： zabbix_get -s 被监控端ip -k '被监控端k[值]' 1 在 zabbix-web 中配置 nginx 新建模板 创建模板监控项 创建监控项 注意： 键值 返回的类型、单位、更新间隔 创建主机 链接模板 注意： 需要链接刚刚写好的监控模板 创建图形 注意： 在配置-主机-图形中 新建图形 新建图形详情 查看图形 "},"zabbix/php-fpm.html":{"url":"zabbix/php-fpm.html","title":"php-fpm","keywords":"","body":" zabbix 监控 php-fpm 修改配置文件 配置文件组成 www.conf # php-fpm 配置文件 default.conf # nginx 配置文件：状态页路径通过 nginx 透出 php-fpm.xml.sh # 探测 php-fpm 状态(xml格式) zabbix_agentd.conf # zabbix-agent 配置文件 userparameter_php-fpm.conf # 定义 zabbix-agent 键值的文件，命名规则为：userparameter_{监控的服务或其他}.conf 修改 zabbix-agent 配置文件 以下为 zabbix-agent 必填项： # vim /etc/zabbix/zabbix_agentd.conf # [root@nginx-node-2 zabbix]# egrep -v \"(^$|^#)\" /etc/zabbix/zabbix_agentd.conf # PidFile=/var/run/zabbix/zabbix_agentd.pid # LogFile=/var/log/zabbix/zabbix_agentd.log # LogFileSize=1 # 限制 zabbix-agent 日志大小 # Server=192.168.0.74 # 指定 zabbix-server 地址 # ServerActive=192.168.0.74 # 检查 zabbix-server 活动情况，默认为 disabled # Hostname=nginx-node-2 # 指定本机 hostname # Include=/etc/zabbix/zabbix_agentd.d/*.conf php # vim /etc/opt/remi/php73/php-fpm.d/www.conf [root@php-node-1 php73]# egrep -v '(^$|^#|^;)' php-fpm.d/www.conf [www] user = nginx group = nginx listen = 0.0.0.0:9000 # 监听端口：不能写多个地址，只好设置为任意地址 listen.owner = nobody # nginx 访问时的用户 listen.group = nobody # nginx 访问时的组 listen.mode = 0660 # nginx 访问的权限 listen.acl_users = nginx listen.acl_groups = nginx listen.allowed_clients = 192.168.0.95,192.168.0.88,192.168.0.33 pm = dynamic pm.max_children = 50 # 最大子进程 pm.start_servers = 5 pm.min_spare_servers = 5 pm.max_spare_servers = 35 pm.status_path = /status-1 # 开启 php-fpm 状态页：刚刚写在 nginx 配置文件中的地址，默认为 disable slowlog = /var/opt/remi/php73/log/php-fpm/www-slow.log # php 的慢日志 php_admin_value[error_log] = /var/opt/remi/php73/log/php-fpm/www-error.log php_admin_flag[log_errors] = on php_value[session.save_handler] = files php_value[session.save_path] = /var/opt/remi/php73/lib/php/session php_value[soap.wsdl_cache_dir] = /var/opt/remi/php73/lib/php/wsdlcache nginx： 开启 php-fpm 状态检测页路径：让 nginx 允许通过此路径访问 php-fpm 状态页 # vim location ~ ^/status-1 { # php-node-1节点 access_log off; # 关闭访问日志 allow 192.168.0.0/24; # 仅允许192.168.0.0/24网段访问 deny all; # 禁止所有地址访问 fastcgi_pass 192.168.0.120:9000; # php-fpm 地址:端口 fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; include fastcgi_params; } location ~ ^/status-2 { # # php-node-2节点 access_log off; allow 192.168.0.0/24; deny all; fastcgi_pass 192.168.0.64:9000; fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; include fastcgi_params; } location ~ ^/status-3 { access_log off; allow 192.168.0.0/24; deny all; fastcgi_pass 192.168.0.135:9000; fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; include fastcgi_params; } userparameter_php-fpm.conf zabbix-agent 的键值定义文件 # vim /etc/zabbix/zabbix_agentd.d/userparameter_php-fpm.conf UserParameter=php-fpm.status[*],/etc/zabbix/scripts/php-fpm.xml.sh $1 php-fpm.xml.sh HOST=\"192.168.0.163\" PORT=\"80\" status=\"status-1\" function query() { curl -s http://${HOST}:${PORT}/${status}?xml | grep \"\" | awk -F'>| zabbix_agent.conf [root@php-node-1 zabbix]# egrep -v \"(^$|^#|;)\" zabbix_agentd.conf PidFile=/var/run/zabbix/zabbix_agentd.pid LogFile=/var/log/zabbix/zabbix_agentd.log LogFileSize=1 # 限制 zabbix-agent 日志大小1M Server=192.168.0.74 # zabbix 服务端IP ServerActive=192.168.0.74 # 检测活动的 zabbix 服务端：设置主动模式时必填项 Hostname=php-node-1 # 设置主机名(本地hostname)：设置主动模式时必填项 Include=/etc/zabbix/zabbix_agentd.d/*.conf userparameter_php-fpm.conf UserParameter=php-fpm.status[*],/etc/zabbix/scripts/php-fpm.xml.sh $1 重启服务 phpsystemctl restart php73-php-fpm nginxsystemctl restart nginx zabbix-agentsystemctl restart zabbix-agent 在服务端验证脚本 zabbix-agent yum install -y zabbix-get zabbix_get -s 192.168.0.120 -k 'php-fpm.status[pool]' # 在服务端运行： zabbix_get -s 被监控端ip -k '被监控端k[值]' www 在 zabbix-web 中配置 php-fpm "},"CentOS7/system.html":{"url":"CentOS7/system.html","title":"CentOS","keywords":"","body":" Linux 基础之其他系统 alpine linux "},"otherSys/otherSys.html":{"url":"otherSys/otherSys.html","title":"其他系统","keywords":"","body":" linux 其他系统 alpine linux "},"otherSys/alpineLinux.html":{"url":"otherSys/alpineLinux.html","title":"alpine Linux","keywords":"","body":"安装Alpine Linux实例 AlpineLinux介绍 Alpine 的意思是“高山的”，比如 Alpine plants高山植物，Alpine skiing高山滑雪、the alpine resort阿尔卑斯山胜地。 Alpine Linux 网站首页注明“Small！Simple！Secure！Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.”概括了以下特点： 小巧：基于Musl libc和busybox，和busybox一样小巧，最小的Docker镜像只有5MB； 安全：面向安全的轻量发行版； 简单：提供APK包管理工具，软件的搜索、安装、删除、升级都非常方便。 适合容器使用：由于小巧、功能完备，非常适合作为容器的基础镜像。 准备工作 下载 Alpine Linux 镜像文件并挂载之虚拟机 alpine-virt-3.10.1-x86_64.iso 开始安装Alpine Linux Google.com 安装Alpine Linux 安装Alpine Linux实例 镜像源配置 在安装时可以选择apk源，如果被跳过可以通过以下方式更换 官方镜像 官方镜像列表：http://rsync.alpinelinux.org/alpine/MIRRORS.txt 国内镜像源 清华TUNA镜像源：https://mirror.tuna.tsinghua.edu.cn/alpine/ 中科大镜像源：http://mirrors.ustc.edu.cn/alpine/ 阿里云镜像源：http://mirrors.aliyun.com/alpine/ 手动替换apk源 sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories tuna传送门>>> apk包管理命令 Alpine与其他Linux发行版不同使用的是apk进行包管理，通过apk --help命令查看完整的包管理命令。 下面列举常用命令： update：从远程镜像源中更新本地镜像源索引 update 命令会从各个镜像源列表下载 apkindex.tar.gz 并存储到本地缓存， 一般在 /var/cache/apk/(Alpine在该目录下)、 /var/lib/apk/ 、/etc/apk/cache/下。 add：安装packages并自动解决依赖关系 add命令从仓库中安装最新软件包，并自动安装必须的依赖包,也可以从第三方仓库添加软件包。 $ apk add openssh openntp vim # 安装软件包 $ apk add --no-cache mysql # 不从本地缓存安装 $ apk add docker --update-cache --repository --allow-untrusted http://mirrors.ustc.edu.cn/alpine/v3.4/main/ # 指定源安装 add：安装指定版本软件包 $ apk add asterisk=1.6.0.21-r0 $ apk add 'asterisk1.6.1' # 大于此版本 del：卸载并删除package $ apk del openssh openntp vim # 直接指定某个软件包 upgrade：升级当前已安装的软件包 upgrade 命令升级系统已安装的所以软件包（一般包括内核），当然也可指定仅升级部分软件包（通过 -u 或 –upgrade 选择指定） $ apk update # 更新最新本地镜像源 $ apk upgrade # 升级软件 $ apk add --upgrade busybox # 指定升级部分软件包 search：搜索软件包 search命令搜索可用软件包，-v参数输出描述内容，支出通配符，-d或–description参数指定通过软件包描述查询。 $ apk search # 查找所以可用软件包 $ apk search -v # 查找所以可用软件包及其描述内容 $ apk search -v 'acf*' # 通过软件包名称查找软件包 $ apk search -v -d 'docker' # 通过描述文件查找特定的软件包 info：列出PACKAGES或镜像源的详细信息 $ apk info # 列出所有已安装的软件包 $ apk info -a zlib # 显示完整的软件包信息 $ apk info --who-owns /sbin/lbu # 显示指定文件属于的包 init系统 Alpine Linux使用的是Gentoo一样的OpenRCinit系统. 以下命令可用于管理init系统： rc-update 主要用于不同运行级增加或者删除服务。 rc-update语法格式 Usage: rc-update [options] add [...] or: rc-update [options] del [...] or: rc-update [options] [show [...]] Options: [ asuChqVv ] -a, --all Process all runlevels # 处理所有运行级别 -s, --stack Stack a runlevel instead of a service # 堆栈运行级别而不是服务 -u, --update Force an update of the dependency tree # 强制更新依赖关系树 -h, --help Display this help output -C, --nocolor Disable color output # 禁用颜色输出 -V, --version Display software version # 显示软件版本 -v, --verbose Run verbosely # 详细地运行 -q, --quiet Run quietly (repeat to suppress errors) # 安静地运行（重复以抑制错误） rc-update 使用实例 $ rc-update add docker boot # 增加一个服务 $ rc-update del docker boot # 删除一个服务 rc-status rc-status 主要用于运行级的状态管理。 rc-status语法格式 Usage: rc-status [options] ... or: rc-status [options] [-a | -c | -l | -r | -s | -u] Options: [ aclrsuChqVv ] -a, --all Show services from all run levels # 显示所有运行级别的服务 -c, --crashed Show crashed services # 显示崩溃的服务 -l, --list Show list of run levels # 显示运行级别列表 -r, --runlevel Show the name of the current runlevel # 显示当前运行级别的名称 -s, --servicelist Show service list # 显示服务列表 -u, --unused Show services not assigned to any runlevel # 显示未分配给任何运行级别的服务 -h, --help Display this help output # 显示此帮助输出 -C, --nocolor Disable color output # 禁用颜色输出 -V, --version Display software version # 显示软件版本 -v, --verbose Run verbosely # 详细地运行 -q, --quiet Run quietly (repeat to suppress errors) # 安静地运行（重复以抑制错误） rc-status 使用实例$ rc-status # 检查默认运行级别的状态 $ rc-status -a # 检查所有运行级别的状态 rc-service rc-service主用于管理服务的状态 rc-service语法格式 Usage: rc-service [options] [-i] ... or: rc-service [options] -e or: rc-service [options] -l or: rc-service [options] -r Options: [ e:ilr:INChqVv ] -e, --exists tests if the service exists or not # 测试服务是否存在 -i, --ifexists if the service exists then run the command # 如果服务存在，则运行该命令 -I, --ifinactive if the service is inactive then run the command # 如果服务处于非活动状态，则运行该命令 -N, --ifnotstarted if the service is not started then run the command # 如果服务未启动，则运行该命令 -l, --list list all available services # 列出所有可用的服务 -r, --resolve resolve the service name to an init script # 将服务名称解析为init脚本 -h, --help Display this help output # 显示此帮助输出 -C, --nocolor Disable color output # 禁用颜色输出 -V, --version Display software version # 显示软件版本 -v, --verbose Run verbosely # 详细地运行 -q, --quiet Run quietly (repeat to suppress errors) # 安静地运行（重复以抑制错误） rc-service使用实例$ rc-service sshd start # 启动一个服务。 $ rc-service sshd stop # 停止一个服务。 $ rc-service sshd restart # 重启一个服务。 openrc 主要用于管理不同的运行级。 openrc语法格式 Usage: openrc [options] [] Options: [ a:no:s:SChqVv ] -n, --no-stop do not stop any services # 不要停止任何服务 -o, --override override the next runlevel to change into when leaving single user or boot runlevels # 在离开单个用户或引导运行级别时，覆盖下一个运行级别以进行更改 -s, --service runs the service specified with the rest of the arguments # 运行使用其余参数指定的服务 -S, --sys output the RC system type, if any # 输出RC系统类型（如果有） -h, --help Display this help output # 显示此帮助输出 -C, --nocolor Disable color output # 禁用颜色输出 -V, --version Display software version # 显示软件版本 -v, --verbose Run verbosely # 详细地运行 -q, --quiet Run quietly (repeat to suppress errors) # 安静地运行（重复以抑制错误） Alpine Linux可用的运行级: default sysinit boot single reboot shutdown openrc 使用实例$ openrc single # 更改为single运行级 其它指令 $ reboot # 重启系统，类似于shutdown -r now。 $ halt # 关机，类似于shutdown -h now。 $ poweroff # 关机 "},"VScode/VScode.html":{"url":"VScode/VScode.html","title":"VScode","keywords":"","body":" VScode 相关 Settings Sync插件教程 VScode 基础 "},"VScode/settingSync.html":{"url":"VScode/settingSync.html","title":"Settings Sync插件","keywords":"","body":"Settings Sync插件教程 搬运地址：vs-code-多设备插件同步插件Settings Sync 插件名称：Settings Sync 插件地址：https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync 插件说明：多个设备来回安装vscode插件及快捷键配置很麻烦，用这个插件就可以通过配置文件的形式在多个设备之间同步vscode的配置了 安装步骤 mac版 vs-code里面 extensions 拓展插件打开，搜索 Settings Sync 安装 打开并登录 github.com ，页面左下角找到并点击 【Personal access tokens】 页面又上角 找到并点击 【Generate new token】 description 输入名称 【code_sync】CheckBox 选中【 gist Create gists 】，点击 绿色button【Generate token】，页面上会出现绿底色的tokens，复制粘贴到剪切板或保留页面不要关闭 切换到 vscode，，随便找到一个页面，alt+shift+u，窗口顶部出现一个小提示，让输入 刚才绿底色的tokens，把剪切板里面的内容粘贴，return 会自动打开一个syncSummary.txt的文件，证明你已经同步成功。 打开 gist.github.com 会出现一个cloudsettings的文件，里面就是你刚同步上去的配置文件 如果tokens在vscode里面输入错了，就按 F1，输入 【 sync 】，reset 即可。 "}}